{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DLR Dataspace Onboarding","text":"<p>This is a guide for getting started with using the <code>Vision-X Dataspace</code> and currently still a work in progress.</p>"},{"location":"file-transfer/","title":"File Transfer","text":"<p>In this tutorial you will learn how to transfer a file between <code>AmazonS3</code> storages via the <code>Dataspace</code>. There are three versions of this tutorial with varying levels of detail.</p>"},{"location":"file-transfer/#1-manual","title":"1. Manual","text":"<p>The manual tutorial explains the basic on how to communicate with the <code>Connectors</code> by using simple http requests and provides low level explanations of the steps involved.</p>"},{"location":"file-transfer/#2-postman","title":"2. Postman","text":"<p>The postman tutorial provides a <code>Postman</code> collection and goes through the same steps as the manual tutorial but with more high level explanations.</p>"},{"location":"file-transfer/#3-python","title":"3. Python","text":"<p>The python tutorial shows how to go through the same steps using the <code>mxd-client</code> python module with explanations focused specifically on the <code>mxd-client</code> itself.</p>"},{"location":"file-transfer/manual/","title":"File Transfer (Manual)","text":""},{"location":"file-transfer/manual/#introduction","title":"Introduction","text":"<p>Here we describe how to interact with the DLR Base-X Dataspace manually via http requests.</p> <p>The individual explanations were heavily drawn from and inspired by the mangement-api-walkthrough (TractusX).</p>"},{"location":"file-transfer/manual/#prerequisites","title":"Prerequisites","text":"<p>For the data transfer you will need two <code>AmazonS3</code> buckets. So either you use two separate storage instances with one bucket each or only one instance with two buckets. These storage instances will have to be reachable via some URLs. For setting up such storage instances you can check out MinIO.</p>"},{"location":"file-transfer/manual/#structure","title":"Structure","text":"<p>This tutorial consists of two parts.</p> <p>In the first part you will create an <code>Asset</code> and a <code>Policy Definition</code> as well as a corresponding <code>Contract Definition</code> on one <code>Connector</code>.</p> <p>In the second part you will fetch the <code>Federated Catalog</code> of a second Connector and choose one <code>Offer</code> in it. Then you will initiate a <code>Contract Negotiation</code> for this <code>Offer</code> as well as an eventual <code>Transfer Process</code>.</p> <p>Make sure to actually use different <code>Connectors</code> in these two parts.</p>"},{"location":"file-transfer/manual/create_asset/","title":"Creating an Asset","text":""},{"location":"file-transfer/manual/create_asset/#introduction","title":"Introduction","text":"<p>An Asset is the fundamental representation of an arbitrary backend interface in the EDC. The Data Provider registers it with its Control Plane as a first step to expose it to the Dataspace via the Dataplane later on. This registration is executed via the following request:</p>"},{"location":"file-transfer/manual/create_asset/#request","title":"Request","text":"<pre><code>POST /v3/assets HTTP/1.1\nHost: https://vision-x-dataspace.base-x-ecosystem.org/&lt;your-connector-name&gt;/management\nX-Api-Key: &lt;your-password&gt;\nContent-Type: application/json\n</code></pre> <p>Replace <code>&lt;your-connector-name&gt;</code> with the actual name of the connector assigned to you and <code>&lt;your-password&gt;</code> with your password.</p> <pre><code>{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n  },\n  \"@id\": \"&lt;asset-id&gt;\",\n  \"properties\": {\n    \"name\": \"test-asset\"\n  },\n  \"privateProperties\": {\n    \"secret_value\": \"my_secret\"\n  },\n  \"dataAddress\": {\n\u00a0 \u00a0 \"@type\": \"DataAddress\",\n\u00a0 \u00a0 \"type\": \"AmazonS3\",\n\u00a0   \"keyName\": \"&lt;file-name-in-storage&gt;\",\n\u00a0 \u00a0 \"region\": \"us-east-1\",\n\u00a0 \u00a0 \"bucketName\": \"&lt;bucket-name&gt;\",\n    \"endpointOverride\": \"&lt;storage-url&gt;\",\n    \"accessKeyId\": \"&lt;storage-username&gt;\",\n    \"secretAccessKey\": \"&lt;storage-password&gt;\"\n  }\n}\n</code></pre> <p>Replace the strings surrounded by <code>&lt;&gt;</code> with the correct values for your setup (<code>&lt;asset-id&gt;</code> is arbitrary). Creating the bucket and uploading the file has to be done manually.</p>"},{"location":"file-transfer/manual/create_asset/#explanation","title":"Explanation","text":"<p>The <code>@id</code> parameter will identify the configured endpoint access permanently. This is the same id that a data consumer will see when being presented the corresponding data offers when retrieving the catalog.</p> <p>Additionally, there is the possibility to add <code>properties</code> and <code>privateProperties</code> to the Asset. The former are exposed in the catalog to potential Data Consumers. Private properties, however, can only be seen by the Data Provider.</p> <p>Most consequential however is the <code>dataAddress</code> section of the asset-APIs payload. It establishes a reference to some file, service, etc. that is supposed to be offered. In the above example this is merely a dummy for purposes of this tutorial.</p> <p>Below is the example <code>dataAddress</code> referencing a file in an <code>AmazonS3</code> file storage used above.</p> <pre><code>\"dataAddress\": {\n\u00a0 \u00a0 \"@type\": \"DataAddress\",\n\u00a0 \u00a0 \"type\": \"AmazonS3\",\n\u00a0   \"keyName\": \"my_file.txt\",\n\u00a0 \u00a0 \"region\": \"us-east-1\",\n\u00a0 \u00a0 \"bucketName\": \"my_bucket\",\n    \"endpointOverride\": \"http://my-storage.com\",\n    \"accessKeyId\": \"my_key_id\",\n    \"secretAccessKey\": \"my_secret_key\"\n}\n</code></pre> <p>For more detailed information see here.</p>"},{"location":"file-transfer/manual/create_contract_definition/","title":"Creating a Contract Definition","text":""},{"location":"file-transfer/manual/create_contract_definition/#introduction","title":"Introduction","text":"<p>A Contract Definition is the connection between a set of Assets with one Access Policy and one Contract Policy. The two policies are both policies as explained previously but checked in different stages of communication between Data Provider and Data Consumer. The creation request looks like this:</p>"},{"location":"file-transfer/manual/create_contract_definition/#request","title":"Request","text":"<pre><code>POST /v2/contractdefinitions HTTP/1.1\nHost: https:/vision-x-dataspace.base-x-ecosystem.org/&lt;your-connector-name&gt;/management\nX-Api-Key: &lt;your-password&gt;\nContent-Type: application/json\n</code></pre> <pre><code>{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n  },\n  \"@type\": \"ContractDefinition\",\n  \"@id\": \"&lt;contract-id&gt;\",\n  \"accessPolicyId\": \"&lt;policy-id&gt;\",\n  \"contractPolicyId\": \"&lt;policy-id\",\n  \"assetsSelector\": \n    {\n      \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n      \"operator\": \"=\",\n      \"operandRight\": \"&lt;asset-id&gt;\"\n    }\n\n}\n</code></pre> <p>Replace <code>&lt;contract-id&gt;</code> by some ID of your choice and replace <code>&lt;asset-id&gt;</code> and <code>&lt;policy-id&gt;</code> by the values chosen in the previous steps.</p>"},{"location":"file-transfer/manual/create_contract_definition/#explanation","title":"Explanation","text":"<p><code>accessPolicyId</code> and <code>contractPolicyId</code> are the identifiers of the policies used in the contract definition. On creation, the EDC does not automatically check if a policy with the corresponding <code>@id</code> exists - the call sequence will fail later when the Data Consumer attempts to find the offer in the catalog-request.</p> <p>The <code>assetsSelector</code> is an EDC-Criterion. This class specifies filters over a set of objects, Assets in this case. The concept is functionally similar to the <code>odrl:Constraint</code> in a Policy but syntactically different. - <code>operandLeft</code> is a property in the Entity (<code>Asset</code> in this case) that is assigned a value. - <code>operator</code> is the logical operation that will be used to compare the <code>operandLeft</code> with the <code>operandRight</code>. - <code>operandRight</code> is the constant that the dynamically retrieved value of <code>operandLeft</code> will be compared to via the <code>operator</code>.</p> <p>This mechanism allows the administrator to bind the same policies to multiple assets. The example on the top of this page will only match a single Asset as the <code>id</code> will be unique as it's derived from the Asset's <code>@id</code>. It is however possible to match multiple Assets if they share a common property:</p> <pre><code>{\n  \"assetsSelector\": {\n    \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/myCommonProperty\",\n    \"operator\": \"=\",\n    \"operandRight\": \"sharedValue\"\n  }\n}\n</code></pre> <p>For more detailed information see here.</p>"},{"location":"file-transfer/manual/create_policy_definition/","title":"Creating a Policy Definition","text":""},{"location":"file-transfer/manual/create_policy_definition/#introduction","title":"Introduction","text":"<p>A policy is a declaration of a Data Consumer's rights and duties. Policies themselves make no statements about the object that they may grant access and usage permission to. They are created at the EDC like this:</p>"},{"location":"file-transfer/manual/create_policy_definition/#request","title":"Request","text":"<pre><code>POST /v2/policydefinitions HTTP/1.1\nHost: https://vision-x-dataspace.base-x-ecosystem.org/&lt;your-connector-name&gt;/management\nX-Api-Key: &lt;your-password&gt;\nContent-Type: application/json\n</code></pre> <p>Replace <code>&lt;your-connector-name&gt;</code> with the actual name of the connector assigned to you and <code>&lt;your-password&gt;</code> with your password.</p> <pre><code>{\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@type\": \"PolicyDefinitionRequestDto\",\n  \"@id\": \"&lt;policy-id&gt;\",\n  \"policy\": {\n    \"@type\": \"Policy\",\n    \"odrl:permission\": [\n      {\n        \"odrl:action\": \"use\",\n        \"odrl:constraint\": {\n          \"@type\": \"Constraint\",\n          \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n          \"odrl:operator\": {\n            \"@id\": \"odrl:eq\"\n          },\n          \"odrl:rightOperand\": \"&lt;BPN_CONSUMER&gt;\"\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>Replace <code>&lt;policy-id&gt;</code> by some ID of your choice.</p>"},{"location":"file-transfer/manual/create_policy_definition/#explanation","title":"Explanation","text":"<p>In the EDC, policies are pure ODRL (Open Digital Rights Language) written in JSON-LD.</p> <p>Even if the user only has rudimentary knowledge of JSON-LD, the policy playground will provide a good starting point to start writing policies.</p> <p>It is important to keep in mind that the extensive ODRL-context (that the EDC is aware of) allows for ergonomic reuse of the vocabulary in individual policies.</p>"},{"location":"file-transfer/manual/create_policy_definition/#writing-policies-for-the-edc","title":"Writing Policies for the EDC","text":"<p>ODRL's model and expressiveness surpass the EDC's current ability to interpret the policies and derive behavior from them. This must be kept in mind even when Data Offers based on policies are not yet published to the Dataspace. Here again, configuring the wrong policies is a risk for unsafe and non-compliant behavior. This is exacerbated by the fact that the EDC interprets policies it can't evaluate as true by default. A couple of examples:</p>"},{"location":"file-transfer/manual/create_policy_definition/#let-all-pass","title":"Let all pass","text":"<pre><code>{\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@type\": \"PolicyDefinitionRequest\",\n  \"@id\": \"{% uuid 'v4' %}\",\n  \"policy\": {\n    \"@type\": \"Policy\",\n    \"odrl:permission\": [\n      {\n        \"odrl:action\": \"use\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"file-transfer/manual/create_policy_definition/#only-let-a-business-partner-group-pass","title":"Only let a Business Partner Group pass","text":"<p>A Business Partner Group is a group of BPNs that are allowed to pass this constraint. A BPN can be added to a group even after a Contract Offer for a certain BPN-Group was published. The groups are persisted and maintained in the Provider's Control Plane. The EDC-Management-API's <code>/business-partner-groups</code> endpoint offers CRUD-operations for it.</p> <pre><code>{\n  \"@context\": {\n    \"tx\": \"https://w3id.org/tractusx/v0.0.1/ns/\"\n  },\n  \"@type\": \"PolicyDefinitionRequest\",\n  \"@id\": \"{% uuid 'v4' %}\",\n  \"policy\": {\n    \"@type\": \"Set\",\n    \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n    \"permission\": [\n      {\n        \"action\": \"use\",\n        \"constraint\": [\n          {\n            \"leftOperand\": \"tx:BusinessPartnerGroup\",\n            \"operator\": \"isPartOf\",\n            \"rightOperand\": \"&lt;group&gt;\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>For more detailed information see here.</p>"},{"location":"file-transfer/manual/fetch_catalog/","title":"Fetching the Federated Catalog","text":""},{"location":"file-transfer/manual/fetch_catalog/#introduction","title":"Introduction","text":"<p>The federated catalog API is the first request in this sequence that passes through the Dataspace. It is executed by the Data Consumer against their own Control Plane and shows the catalog of all other participants which are periodically retrieved. The request looks like this:</p>"},{"location":"file-transfer/manual/fetch_catalog/#request","title":"Request","text":"<pre><code>POST /federatedcatalog HTTP/1.1\nHost: https://vision-x-dataspace.base-x-ecosystem.org/&lt;your-connector-name&gt;/management\nX-Api-Key: &lt;your-password&gt;\nContent-Type: application/json\n</code></pre> <p>Replace <code>&lt;your-connector-name&gt;</code> with the actual name of the connector assigned to you and <code>&lt;your-password&gt;</code> with your password.</p> <pre><code>{}\n</code></pre> <p>The returned payload is a list of <code>dcat:Catalog</code>. The <code>Catalogs</code> may look something like this.</p> <pre><code>{\n  \"@id\": \"10b1b0f3-5a67-4eee-9404-5a300356a50d\",\n  \"@type\": \"dcat:Catalog\",\n  \"dcat:dataset\": [\n    {\n      \"@id\": \"&lt;asset-id&gt;\",\n      \"@type\": \"dcat:Dataset\",\n      \"odrl:hasPolicy\": {\n        \"@id\": \"Y29udHJhY3QtZ2V0LTE=:anNvbi1nZXQtMQ==:MDEwODg2ZTItZDhmNi00Y2NjLWFhMWYtY2U2Y2JmYjlmMWQz\",\n        \"@type\": \"odrl:Set\",\n        \"odrl:permission\": {\n          \"odrl:target\": \"&lt;asset-id&gt;\",\n          \"odrl:action\": {\n            \"odrl:type\": \"http://www.w3.org/ns/odrl/2/use\"\n          },\n          \"odrl:constraint\": {\n            \"odrl:leftOperand\": \"https://w3id.org/tractusx/v0.0.1/ns/Membership\",\n            \"odrl:operator\": {\n              \"@id\": \"odrl:eq\"\n            },\n            \"odrl:rightOperand\": \"active\"\n          }\n        },\n        \"odrl:prohibition\": [],\n        \"odrl:obligation\": [],\n        \"odrl:target\": \"&lt;asset-id&gt;\"\n      },\n      \"dcat:distribution\": [\n        {\n          \"@type\": \"dcat:Distribution\",\n          \"dct:format\": {\n            \"@id\": \"HttpProxy\"\n          },\n          \"dcat:accessService\": \"b4f2c6b6-d3d1-46e2-a517-6912b7f8a509\"\n        },\n        {\n          \"@type\": \"dcat:Distribution\",\n          \"dct:format\": {\n            \"@id\": \"AmazonS3\"\n          },\n          \"dcat:accessService\": \"b4f2c6b6-d3d1-46e2-a517-6912b7f8a509\"\n        }\n      ],\n      \"description\": \"Json Get Asset\",\n      \"id\": \"&lt;asset-id&gt;\",\n      \"dct:type\": {\n        \"@id\": \"https://my-namespa.ce/my-asset-type\"\n      }\n    }\n  ],\n  \"dcat:service\": {\n    \"@id\": \"b4f2c6b6-d3d1-46e2-a517-6912b7f8a509\",\n    \"@type\": \"dcat:DataService\",\n    \"dct:terms\": \"connector\",\n    \"dct:endpointUrl\": \"https://&lt;provider-control&gt;/api/v1/dsp\"\n  },\n  \"participantId\": \"&lt;prodvider-bpn&gt;\",\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"dct\": \"https://purl.org/dc/terms/\",\n    \"tx\": \"https://w3id.org/tractusx/v0.0.1/ns/\",\n    \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"dcat\": \"https://www.w3.org/ns/dcat/\",\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\",\n    \"dspace\": \"https://w3id.org/dspace/v0.8/\"\n  }\n}\n</code></pre> <p>Find the offer for your chosen <code>&lt;asset-id&gt;</code> and note down all of <code>odrl:hasPolicy</code> as well as <code>dcat:service.dct:endpointUrl</code> and <code>participantId</code> for the next step.</p>"},{"location":"file-transfer/manual/fetch_catalog/#explanation","title":"Explanation","text":"<p>In the catalog above, some properties are meta-data that's independent of whether the Provider extends any Data Offers to the Consumer.</p> <ul> <li>The <code>@id</code> is the identifier for this catalog. As the catalog is created dynamically, the id is a UUID regenerated for each request to the Provider's catalog.</li> <li><code>dcat:service</code> holds data about the Provider's connector that the Consumer's connector communicated with. Especially the <code>dcat:endpointUrl</code> will become important in the next step.</li> <li><code>participantId</code> signifies the BPN of the Provider. This is specific to the EDC and not mandated by the DSP-spec.</li> </ul> <p>The Data Offers are hidden in the <code>dcat:dataset</code> section, grouped by the Asset that the offer is made for. Consequently, if there may be more than one offer for the same Asset, requiring a Data Consumer to select based on the policies included.</p> <ul> <li>The <code>@id</code> corresponds to the id of the Asset that can be negotiated for.</li> <li><code>dcat:Distribution</code> makes statements over which Data Planes an Asset's data can be retrieved.</li> <li><code>dcat:hasPolicy</code> holds the Data Offer that is relevant for the Consumer.<ul> <li><code>@id</code> is the identifier for the Data Offer. The EDC composes this id by concatenating three identifiers in base64-encoding separated with <code>:</code> (colons). The format is <code>base64(contractDefinitionId):base64(assetId):base64(newUuidV4)</code>. The last of three UUIDs changes with every request as every /v2/catalog/request call yields a new catalog with new Data Offers.</li> <li>The <code>odrl:target</code> properties in the Data Offer always hold the Asset's id.</li> <li>The <code>odrl:permission</code>, <code>odrl:prohibition</code> and <code>odrl:obligation</code> will hold the content of the contractPolicy configured in the Contract Definition the Contract Offer was derived from.</li> </ul> </li> </ul> <p>For more detailed information see here.</p>"},{"location":"file-transfer/manual/initiate_negotiation/","title":"Initiating a Contract Negotiation","text":""},{"location":"file-transfer/manual/initiate_negotiation/#introduction","title":"Introduction","text":"<p>Contract Negotiation is the second check a Data Consumer has to pass before getting access rights to a backend resource. It includes - a check of the Consumer's VC against the Offer's <code>contractPolicy</code>. - a check of the <code>contractPolicy</code> against the policy the Data Consumer signals in the negotiation request to.</p>"},{"location":"file-transfer/manual/initiate_negotiation/#request","title":"Request","text":"<pre><code>POST /v2/contractnegotiations HTTP/1.1\nHost: https://vision-x-dataspace.base-x-ecosystem.org/&lt;your-connector-name&gt;/management\nX-Api-Key: &lt;your-password&gt;\nContent-Type: application/json\n</code></pre> <p>Replace <code>&lt;your-connector-name&gt;</code> with the actual name of the connector assigned to you and <code>&lt;your-password&gt;</code> with your password.</p> <pre><code>{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n  },\n  \"@type\": \"ContractRequest\",\n  \"connectorAddress\": \"&lt;dcat:service.dct:endpointUrl&gt;\",\n  \"protocol\": \"dataspace-protocol-http\",\n  \"providerId\": \"&lt;providerId&gt;\",\n  \"connectorId\": \"&lt;providerId&gt;\", \n  \"policy\": &lt;odrl:hasPolicy&gt;\n}\n</code></pre> <p>Replace the string surrounded by <code>&lt;&gt;</code> with the values received from the last step and note down the received <code>@id</code>.</p>"},{"location":"file-transfer/manual/initiate_negotiation/#explanation","title":"Explanation","text":"<ul> <li><code>connectorAddress</code> sets the coordinates for the connector that the Consumer-EDC shall negotiate with (Provider   EDC).   It will usually end on /api/v1/dsp</li> <li><code>protocol</code> must be \"dataspace-protocol-http\"</li> <li><code>providerId</code> is the Data Provider's BPN</li> <li><code>connectorId</code> and <code>providerId</code> must both hold the correct BPN for the <code>connectorAddress</code>.</li> </ul> <p>This call does not yet return a negotiation result but rather a server-side generated id for the contract negotiation in the <code>@id</code> property.</p> <pre><code>{\n    \"@type\": \"IdResponse\",\n    \"@id\": \"773b8795-45f2-4c57-a020-dc04e639baf3\",\n    \"edc:createdAt\": 1701289079455,\n    \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"dct\": \"https://purl.org/dc/terms/\",\n        \"tx\": \"https://w3id.org/tractusx/v0.0.1/ns/\",\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"dcat\": \"https://www.w3.org/ns/dcat/\",\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\",\n        \"dspace\": \"https://w3id.org/dspace/v0.8/\"\n    }\n}\n</code></pre> <p>For more detailed information see here.</p>"},{"location":"file-transfer/manual/initiate_negotiation/#checking-for-completion","title":"Checking for Completion","text":"<pre><code>GET /v2/contractnegotiation/&lt;@id&gt; HTTP/1.1\nHost: https://vision-x-dataspace.base-x-ecosystem.org/&lt;your-connector-name&gt;/management\nX-Api-Key: &lt;your-password&gt;\nContent-Type: application/json\n</code></pre> <p>Replace <code>&lt;your-connector-name&gt;</code> with the actual name of the connector assigned to you and <code>&lt;your-password&gt;</code> with your password. Also, replace <code>&lt;@id&gt;</code> by the ID revieved from above.</p> <p>The returned details for the negotiation should look something like this:</p> <pre><code>{\n  \"@type\": \"ContractNegotiation\",\n  \"@id\": \"50bf14b9-8f6e-4975-8ada-6f24379a58a2\",\n  \"type\": \"CONSUMER\",\n  \"protocol\": \"dataspace-protocol-http\",\n  \"state\": \"VERIFIED\",\n  \"counterPartyId\": \"&lt;providerId&gt;\",\n  \"counterPartyAddress\": \"&lt;dcat:service.dct:endpointUrl&gt;\",\n  \"contractAgreementId\": \"&lt;contractNegotiationId&gt;\",\n  \"createdAt\": 1701351116766,\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"dct\": \"https://purl.org/dc/terms/\",\n    \"tx\": \"https://w3id.org/tractusx/v0.0.1/ns/\",\n    \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"dcat\": \"https://www.w3.org/ns/dcat/\",\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\",\n    \"dspace\": \"https://w3id.org/dspace/v0.8/\"\n  }\n}\n</code></pre> <p>The Contract Negotiation was successful when <code>state == FINALIZED</code>.</p> <p>Note down the <code>contractAgreementId</code>. It will will be important for the next step.</p>"},{"location":"file-transfer/manual/initiate_transfer/","title":"Initiating a Transfer Process","text":""},{"location":"file-transfer/manual/initiate_transfer/#introduction","title":"Introduction","text":"<p>Despite the naming, the Transfer Process is not the step that transmits the backend's data from the Provider to the Consumer. What this API does instead is trigger the Transfer of a Data Plane token from the Provider Control Plane to the Consumer Control Plane and in turn to a location specified by the Data Consumer.</p>"},{"location":"file-transfer/manual/initiate_transfer/#request","title":"Request","text":"<pre><code>POST /v2/transferprocesses HTTP/1.1\nHost: https://vision-x-dataspace.base-x-ecosystem.org/&lt;your-connector-name&gt;/management\nX-Api-Key: &lt;your-password&gt;\nContent-Type: application/json\n</code></pre> <p>Replace <code>&lt;your-connector-name&gt;</code> with the actual name of the connector assigned to you and <code>&lt;your-password&gt;</code> with your password.</p> <pre><code>{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"assetId\": \"&lt;asset-id&gt;\",\n  \"connectorAddress\": \"&lt;dcat:service.dct:endpointUrl&gt;\",\n  \"contractId\": \"&lt;contractAgreementId&gt;\",\n  \"dataDestination\": {\n    \"type\": \"AmazonS3\",\n    \"keyName\": \"&lt;file-name-in-storage&gt;\",\n    \"bucketName\": \"&lt;bucket-name&gt;\",\n    \"region\": \"us-east-1\",\n    \"endpointOverride\": \"&lt;storage-url&gt;\",\n    \"accessKeyId\": \"&lt;storage-username&gt;\",\n    \"secretAccessKey\": \"&lt;storage-password&gt;\"\n  },\n  \"protocol\": \"dataspace-protocol-http\",\n}\n</code></pre> <p>Once again replace the values surrounded by <code>&lt;&gt;</code> with the correct values for your setup. For the values in <code>dataDestination</code> it should now be the ones for the other storage / bucket. Also, note down the received <code>@id</code>.</p>"},{"location":"file-transfer/manual/initiate_transfer/#explanation","title":"Explanation","text":"<ul> <li><code>assetId</code> is the id of the Asse that a transfer process should be triggered for.</li> <li><code>connectorAddress</code> is the DSP-endpoint of the Data Provider.</li> <li><code>contractId</code> represents the Contract Agreement that the Provider and Consumer agreed on during the Contract Negotiation   phase.</li> <li><code>dataDestination</code> will in the case of an HTTP-based transfer of the Token be a <code>DataAddress</code> object, holding exclusively   the <code>type</code> property that must be set to <code>\"HttpProxy\"</code>.</li> <li><code>protocol</code> describes the protocol between the EDCs and will always be <code>dataspace-protocol-http</code>.</li> </ul> <p>This call also returns an id, that can be used to monitor the progress.</p> <pre><code>{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n  },\n  \"@id\": \"177aba51-52d7-44dc-beab-fd6151147024\",\n  \"createdAt\": 1688465655\n}\n</code></pre> <p>For more detailed information see here.</p>"},{"location":"file-transfer/manual/initiate_transfer/#checking-for-completion","title":"Checking for Completion","text":"<pre><code>GET /v2/transferprocesses/&lt;@id&gt; HTTP/1.1\nHost: https://vision-x-dataspace.base-x-ecosystem.org/&lt;your-connector-name&gt;/management\nX-Api-Key: &lt;your-password&gt;\nContent-Type: application/json\n</code></pre> <p>Replace <code>&lt;your-connector-name&gt;</code> with the actual name of the connector assigned to you and <code>&lt;your-password&gt;</code> with your password. Also, replace <code>&lt;@id&gt;</code> by the ID revieved from above.</p> <p>The returned details for the transfer should look something like this:</p> <pre><code>{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n  },\n  \"@type\": \"https://w3id.org/edc/v0.0.1/ns/TransferProcess\",\n  \"@id\": \"process-id\",\n  \"correlationId\": \"correlation-id\",\n  \"type\": \"PROVIDER\",\n  \"state\": \"COMPLETED\",\n  \"stateTimestamp\": 1688465655,\n  \"assetId\": \"&lt;asset-id&gt;\",\n  \"connectorId\": \"&lt;providerId&gt;\",\n  \"contractId\": \"&lt;providerId&gt;\",\n  \"dataDestination\": {\n    \"type\": \"HttpProxy\"\n  },\n  \"createdAt\": 1688465655\n}\n</code></pre> <p>The Transfer Process and also this tutorial as a whole was successful when <code>state == COMPLETED</code>.</p>"},{"location":"file-transfer/postman/","title":"File Transfer (Postman)","text":""},{"location":"file-transfer/postman/#introduction","title":"Introduction","text":"<p>Here we describe how to interact with the DLR Base-X Dataspace via http requests using Postman.</p> <p>You can download the <code>Postman</code> collection from here.</p>"},{"location":"file-transfer/postman/#prerequisites","title":"Prerequisites","text":"<p>For the data transfer you will need two <code>AmazonS3</code> buckets. So either you use two separate storage instances with one bucket each or only one instance with two buckets. These storage instances will have to be reachable via some URLs. For setting up such storage instances you can check out MinIO.</p> <p>To use the collection it needs to be imported into <code>Postman</code> and the provided with values in the 'Variables' section:</p> Variable Description <code>ALICE_API_KEY</code> The X-Api-Key of the Provider  &lt;your-password-1&gt; <code>ALICE_BPN</code> The <code>Business Partner Number</code> of the Provider <code>Connector</code> (required for locating the <code>Offer</code> in the <code>Catalog</code>)  &lt;your-connector-id-1&gt; <code>ALICE_MANAGEMENT</code> The path to the Management URL of the Provider  https://vision-x-dataspace.base-x-ecosystem.org/&lt;your-connector-name-1&gt;/management <code>ALICE_MINIO_URL</code> The URL where your <code>AmazonS3</code> storage containg the file you want to transfer is reachable from <code>ALICE_BUCKET_NAME</code> The bucket in which the file is located <code>ALICE_ACCESS_KEY_ID</code> Some username to access your <code>AmazonS3</code> storage <code>ALICE_SECRET_ACCESS_KEY</code> The password matching to the username to access your <code>AmazonS3</code> storage <code>BOB_API_KEY</code> The X-Api-Key of the Consumer  &lt;your-password-2&gt; <code>BOB_BPN</code> The <code>Business Partner Number</code> of the Consumer <code>Connector</code> (required for setting a specific <code>Contract Policy</code>)  &lt;your-connector-id-2&gt; <code>BOB_MANAGEMENT</code> The path to the Management URL of the Provider  https://vision-x-dataspace.base-x-ecosystem.org/&lt;your-connector-name-2&gt;/management <code>BOB_MINIO_URL</code> The URL where your <code>AmazonS3</code> storage where you want the file to be transferred to is reachable from <code>BOB_BUCKET_NAME</code> The bucket in which you want the file to be transferred to <code>BOB_ACCESS_KEY_ID</code> Some username to access your <code>AmazonS3</code> storage <code>BOB_SECRET_ACCESS_KEY</code> The password matching to the username to access your <code>AmazonS3</code> storage <code>FILE_NAME</code> The name of the file you want to transfer"},{"location":"file-transfer/postman/#structure","title":"Structure","text":"<p>This tutorial consists of two parts.</p> <p>In the first part ('Alice') you will create an <code>Asset</code> and two <code>Policy Definition</code> as well as a corresponding <code>Contract Definition</code> on one <code>Connector</code>.</p> <p>In the second part ('Bob') you will fetch the <code>Federated Catalog</code> of a second Connector and choose one <code>Offer</code> in it. Then you will initiate a <code>Contract Negotiation</code> for this <code>Offer</code> as well as an eventual <code>Transfer Process</code>.</p>"},{"location":"file-transfer/postman/alice/","title":"Alice","text":""},{"location":"file-transfer/postman/alice/#introduction","title":"Introduction","text":"<p>In this part you will create an <code>Offer</code> and make it available in the <code>Dataspace</code>.</p>"},{"location":"file-transfer/postman/alice/#create-asset","title":"Create Asset","text":"<p>The first step is to create an <code>Asset</code> for a file in some bucket of an <code>AmazonS3</code> storage. This <code>Asset</code> will later be available to others as an <code>Offer</code> by creating a <code>Contract Definition</code>.</p> <p>The <code>Asset</code> contains all necessary information for the <code>Connector</code> to later retrieve the file as well as descriptions for others to see.</p>"},{"location":"file-transfer/postman/alice/#create-access-policy","title":"Create Access Policy","text":"<p>The next step is to create a <code>Policy Definition</code> that will be used as the <code>Access Policy</code> for the <code>Offer</code>.</p> <p>The specific <code>Policy</code> here madates to present <code>BpnCredential</code>. All <code>Participants</code> of the <code>Dataspace</code> already possess this <code>Credential</code> by default and the <code>Connectors</code> will automatically present this <code>Credential</code> when communicating with one another.</p>"},{"location":"file-transfer/postman/alice/#create-contract-policy","title":"Create Contract Policy","text":"<p>Similar to the last step, here another <code>Policy Definition</code> is created. It will later be used as the <code>Contract Policy</code> for the <code>Offer</code>.</p> <p>The specific <code>Policy</code> here mandates to have the <code>Business Partner Number</code> of <code>Bob</code> which acts as a unique identifier for <code>Participants</code> in the <code>Dataspace</code>.</p>"},{"location":"file-transfer/postman/alice/#create-contract-definition","title":"Create Contract Definition","text":"<p>In this step a <code>Contract Definition</code> with the <code>Access Policy</code> and the <code>Contract Policy</code> from the previous steps is created. The <code>Assets Selector</code> is set to only select the <code>Asset</code> with the specific <code>ID</code> of the <code>Asset</code> created in the first step.</p> <p>Upon requesting the <code>Catalog</code> the <code>Connector</code> will look through all <code>Contract Definitions</code> whose <code>Access Policy</code> is fulfilled and create an <code>Offer</code> for each <code>Asset</code> selected in the <code>Asset Selectors</code>.</p>"},{"location":"file-transfer/postman/bob/","title":"Bob","text":""},{"location":"file-transfer/postman/bob/#introduction","title":"Introduction","text":"<p>In this part you will negotiate a <code>Contract Agreement</code> for the <code>Offer</code> created in the previous part and perform a <code>Transfer Process</code> for the <code>Offer</code>.</p>"},{"location":"file-transfer/postman/bob/#fetch-catalog","title":"Fetch Catalog","text":"<p>The first step is to fetch the <code>Federated Catalog</code> containing all <code>Offers</code> of all <code>Participants</code> of the <code>Dataspace</code>.</p> <p>The <code>Federated Catalog</code> is unique to each <code>Participant</code> and periodically updated by querying all other <code>Connectors</code> for their <code>Catalog</code>. This means that if ones own <code>Connector</code> does not satisfy the <code>Access Policy</code> of a <code>Contract Definition</code>, then no <code>Offers</code> will be generated for this <code>Contract Definition</code> and as such no <code>Offers</code> will be visible in ones <code>Federated Catalog</code>.</p>"},{"location":"file-transfer/postman/bob/#initiate-negotation","title":"Initiate Negotation","text":"<p>The second step is to take the 'participantId' and'originator' of the <code>Catalog</code> where the desired <code>Offer</code> is located in as well as the whole 'odrl:hasPolicy' of the <code>Offer</code> and use them to initiate a <code>Contract Negotiation</code> with the <code>Participant</code> providing the <code>Offer</code>.</p> <p>These values are automatically retrieved and stored as variables in the <code>Postman Collection</code>.</p>"},{"location":"file-transfer/postman/bob/#get-negotiation","title":"Get Negotiation","text":"<p>The next step is to get the <code>ID</code> of the <code>Contract Agreement</code> which is generated when a <code>Contract Negotiation</code> proccessed and utlimately 'FINALIZED'.</p> <p>This request should be sent at least a few seconds after the previous step, since it takes a bit for the <code>Contract Negotiation</code> to reach the point at which the <code>Contract Agreement</code> is generated.</p> <p>The <code>ID</code> of the <code>Contract Agreement</code> is automatically retrieved and stored as variables in the <code>Postman Collection</code>.</p>"},{"location":"file-transfer/postman/bob/#initiate-transfer","title":"Initiate Transfer","text":"<p>In this step a <code>Transfer Process</code> is initiated in a similar way to the <code>Contract Negotiation</code> by additionally referencing the <code>Contract Agreement</code> by its <code>\u00ccD</code> and providing sufficient addresses and credentials for the <code>Connector</code> providing the <code>Offer</code> to put the file in some bucket of an <code>AmazonS3</code> storage.</p> <p>The <code>ID</code> of the <code>Transfer Process</code> is automatically retrieved and stored as variables in the <code>Postman Collection</code>.</p>"},{"location":"file-transfer/postman/bob/#get-transfer","title":"Get transfer","text":"<p>In this last step the <code>Transfer Process</code> should already be in the state 'COMPLETED' an thus the file transfer successfully performed.</p> <p>This request should be sent at least a few seconds after the previous step, since it takes a bit for the file to be transfered and therefore the <code>Transfer Process</code> to reach the 'COMPLETED' state.</p> <p>This step serves merely as confirmation that the transfer was indeed successful.</p>"},{"location":"file-transfer/python/","title":"File Transfer (Python)","text":""},{"location":"file-transfer/python/#introduction","title":"Introduction","text":"<p>Here we describe how to interact with the DLR Base-X Dataspace using the <code>mxd-client</code> python module. (coming soon)</p>"}]}