{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dataspace Documentation","text":"<p>This site provides documentation for using the Dataspace. This includes guides on naviagting the website on vision-x-dataspace.base-x-ecosystem.org as well as the API at vision-x-api.base-x-ecosystem.org and much more.</p>"},{"location":"api/","title":"API","text":"<p>This section explains how to interact with the Dataspace using the API directly, rather than the website. It is located at vision-x-api.base-x-ecosystem.org. <code>OpenAPI</code> documentation can be found at vision-x-api.base-x-ecosystem.org/docs.</p>"},{"location":"api/bdrs/","title":"BDRS","text":"<p>The <code>BDRS</code> (BPN DID Resolution Service) is responsible for providing a mapping between <code>BPNs</code> and <code>DIDs</code>.</p>"},{"location":"api/bdrs/#management-api","title":"Management API","text":"<p>The <code>Management API</code> is used to manage the mapping. It is available at <code>/bdrs/management</code>, but only administrators have access to it. For detailled documentation on this API, see BDRS management-api.</p>"},{"location":"api/bdrs/#directoy-api","title":"Directoy API","text":"<p>The <code>Directory API</code> can be use to retrieve the mapping. It is available at <code>/bdrs/directory</code>. For detailled documentation on this API, see BDRS directoy-api.</p>"},{"location":"api/connector-apis/","title":"Connector APIs","text":"<p>The Connector consists of several software components. Each of these expose several APIs. Please refer to other parts of this documentation, for more information on the components in general.</p>"},{"location":"api/connector-apis/#controlplane","title":"Controlplane","text":""},{"location":"api/connector-apis/#management-api","title":"Management API","text":"<p>The <code>Management API</code> lets you manage all your <code>Assets</code>, <code>Policy Definitions</code>, etc. It is available at <code>/connectors/&lt;connector-name&gt;/cp/management</code> and all of its endpoints are protected. For detailled documentation on this API, see Tractus-X EDC control-plane API. Note that the section \"Application Observability\" in the Tractus-X EDC documentation is not part of the <code>Management API</code> but part of the <code>Default API</code> instead.</p>"},{"location":"api/connector-apis/#protocol-api","title":"Protocol API","text":"<p>The <code>Protocol API</code> enables communication between Connectors and only meant to be used directly by Connectors themselves. It is available at <code>/connectors/&lt;connector-name&gt;/cp/protocol</code>. For detailled documentation on this API, see EDC dsp-api.</p>"},{"location":"api/connector-apis/#default-api","title":"Default API","text":"<p>The <code>Default API</code> exposes endpoints for checking health, readiness and simlar status indicators. It is available at <code>/connectors/&lt;connector-name&gt;/cp/default</code>. For detailled documentation on this API, see Tractus-X EDC control-plane API, specifically the \"Application Observability\" section.</p>"},{"location":"api/connector-apis/#dataplane","title":"Dataplane","text":""},{"location":"api/connector-apis/#public-api","title":"Public API","text":"<p>The <code>Public API</code> is used to perform <code>PULL</code> transfers. It is available at <code>/connectors/&lt;connector-name&gt;/dp/public</code>. For an example on how to utilize this API, see Tractus-X EDC Walkthrough.</p>"},{"location":"api/connector-apis/#proxy-api","title":"Proxy API","text":"<p>The <code>Proxy API</code> can also alternatively be used for <code>PULL</code> transfers. It is available at <code>/connectors/&lt;connector-name&gt;/dp/proxy</code> and all of its endpoints are protected. For an example on how to utilize this API, see Tractus-X EDC Walkthrough.</p>"},{"location":"api/connector-apis/#default-api_1","title":"Default API","text":"<p>The <code>Default API</code> exposes endpoints for checking health, readiness and simlar status indicators. It is available at <code>/connectors/&lt;connector-name&gt;/dp/default</code>. For detailled documentation on this API, see Tractus-X EDC data-plane API, specifically the \"Application Observability\" section.</p>"},{"location":"api/connector-apis/#identity-hub","title":"Identity Hub","text":""},{"location":"api/connector-apis/#identity-api","title":"Identity API","text":"<p>The <code>Identity API</code> is used to manage your <code>DID documents</code>, <code>Verifiably Credentials</code>, etc. It is available at <code>/connectors/&lt;connector-name&gt;/ih/identity</code> and all of its endpoints are protected. For detailled documentation on this API, see IdentityHub identity-api.</p>"},{"location":"api/connector-apis/#presentation-api","title":"Presentation API","text":"<p>The <code>Presentation API</code> allows clients to request credentials in the form of a <code>Verifiable Presentation</code>. It is available at <code>/connectors/&lt;connector-name&gt;/ih/presentation</code>. For detailled documentation on this API, see IdentityHub presentation-api.</p>"},{"location":"api/connector-apis/#sts-api","title":"STS API","text":"<p>The <code>STS API</code> is responsible for generating <code>ID-Tokens</code> to access the <code>Presentation API</code>. It is available at <code>/connectors/&lt;connector-name&gt;/ih/sts</code> and all of its endpoints are protected. As it is only supposed to be used internally, this documentation will not provide a detailled description.</p>"},{"location":"api/connector-apis/#default-api_2","title":"Default API","text":"<p>The <code>Default API</code> exposes endpoints for checking health, readiness and simlar status indicators. It is available at <code>/connectors/&lt;connector-name&gt;/ih/default</code>. It works exactly the same as for the control and data plane.</p>"},{"location":"api/connector-apis/#did-document","title":"DID Document","text":"<p>The <code>DID Document</code> can of a Connector viewed by sending a <code>GET</code> request to <code>/connector/&lt;connector-name&gt;/did.json</code>.</p>"},{"location":"api/connector-apis/#vault-token","title":"Vault Token","text":"<p>The vault token to access the <code>Hashicorp Vault</code> at vision-x-vault.base-x-ecosystem.org can be retrieved by making a <code>GET</code> request to <code>/connectors/&lt;connector-name&gt;/vault/token</code>. The vault can be used to provide the Connector with confidential information thourgh there rather than sending them directly in requests to the Connector.</p>"},{"location":"api/connectors/","title":"Connectors","text":"<p>Just like you manage Connectors through the website, you can also manage them via the API. This section describes exactly how to do this. All endpoints described here are protected.</p>"},{"location":"api/connectors/#create-connectors","title":"Create Connectors","text":"<p>You can create a Connector by sending a <code>POST</code> request to <code>/connectors/&lt;your-chosen-connector-name&gt;</code>.</p> <p>The payload must be provided as a <code>JSON</code>. If you intend on only using the <code>API</code> you can simply use the <code>HttpData</code> payload. However, if you want to also use this Connector via the website you need to provide correct storage credentials in the payload.</p> <p>After a successful request the Connector will be created and begin to start up.</p>"},{"location":"api/connectors/#httpdata","title":"HttpData","text":"<pre><code>{\n    \"storage_type\": \"HttpData\",\n    \"storage_config\": {}\n}\n</code></pre>"},{"location":"api/connectors/#amazons3","title":"AmazonS3","text":"<p>For explanations on the exact values you need to provide, please refer to the website documentation.</p> <pre><code>{\n    \"storage_type\": \"AmazonS3\",\n    \"storage_config\": {\n        \"bucket_name\": \"&lt;bucket-name&gt;\",\n        \"region\": \"&lt;region&gt;\",\n        \"url\": \"&lt;url&gt;\",\n        \"username_read\": \"&lt;username-read&gt;\",\n        \"password_read\": \"&lt;password-read&gt;\",\n        \"username_write\": \"&lt;username-write&gt;\",\n        \"password_write\": \"&lt;password-write&gt;\"\n    }\n}\n</code></pre>"},{"location":"api/connectors/#azurestorage","title":"AzureStorage","text":"<p>For explanations on the exact values you need to provide, please refer to the website documentation.</p> <pre><code>{\n    \"storage_type\": \"AzureStorage\",\n    \"storage_config\": {\n        \"container_name\": \"&lt;container-name&gt;\",\n        \"region\": \"&lt;region&gt;\",\n        \"url\": \"&lt;url&gt;\",\n        \"account_name_read\": \"&lt;account-name-read&gt;\",\n        \"account_key_read\": \"&lt;account-key-read&gt;\",\n        \"account_name_write\": \"&lt;account-name-write&gt;\",\n        \"account_key_write\": \"&lt;account-key-write&gt;\"\n    }\n}\n</code></pre>"},{"location":"api/connectors/#edit-connectors","title":"Edit Connectors","text":"<p>Simlarly to creating a Connector you can edit a Connector by sending a <code>PUT</code> request to <code>/connectors/&lt;connector-name&gt;</code>. The payload you need to provide here is exactly the same as for creating a Connector. After a successful request the Connector will restart using the newly provided configuration.</p>"},{"location":"api/connectors/#get-connectors","title":"Get Connectors","text":"<p>You can get a list of all your Connectors by sending a <code>GET</code> request to <code>/connectors</code>. If you want to get only a specific Connector you can send a <code>GET</code> request to <code>/connectors/&lt;connector-name&gt;</code>.</p>"},{"location":"api/connectors/#start-and-stop-connectors","title":"Start and Stop Connectors","text":"<p>To start and stop a Connector you can send a <code>GET</code> request to <code>/connectors/&lt;connector-name&gt;/start</code> and <code>/connectors/&lt;connector-name&gt;/stop</code> respectively.</p>"},{"location":"api/connectors/#fail-connectors","title":"Fail Connectors","text":"<p>In some cases a Connector might be stuck in some unwanted state because of a bug. If that is the case you can get the Connector into the <code>FAILED</code> state by sending a <code>GET</code> request to <code>/connectors/&lt;connector-name&gt;/fail</code>. From there you can either stop or delete the Connector. Note, however, that this does not necessarily mitigate the bug.</p>"},{"location":"api/federated/","title":"Federated","text":"<p>There are a number of endpoints which can be used to retrieve aggregate information on all users overall.</p>"},{"location":"api/federated/#user","title":"User","text":"<p>A mapping of users to the list of <code>BPNs</code> of their Connectors can be retrieved by sending a <code>GET</code> request to <code>/federated/user</code>.</p>"},{"location":"api/federated/#group","title":"Group","text":"<p>A mapping of groups to the list of users in it can be retrieved by sending a <code>GET</code> request to <code>/federated/group</code>.</p>"},{"location":"api/federated/#did","title":"DID","text":"<p>A list of the <code>DIDs</code> of all running Connectors can be retrieved by sending a <code>GET</code> request to <code>/federated/did</code>.</p>"},{"location":"api/federated/#bpn","title":"BPN","text":"<p>A mapping of Connector <code>BPNs</code> to their user can be retrieved by sending a <code>GET</code> request to <code>/federated/bpn</code>.</p>"},{"location":"api/federated/#catalog","title":"Catalog","text":"<p>A collection of all offers of all running Connectors, the <code>Federated Catalog</code>, can be retrieved by sending a <code>GET</code> request to <code>/federated/catalog</code>. One can optionally specify a \"group\" argument to only get the offers of users in the specified group.</p>"},{"location":"api/federated/#catalog-post","title":"Catalog (POST)","text":"<p>In addition to the regular catalog endpoint one can also send a <code>POST</code> request to <code>/federated/catalog/query</code> to formulate more specific criteria. For more information on this, see Federated Catalog catalog-api.</p>"},{"location":"api/getting-started/","title":"Getting started","text":"<p>To use most API endpoints you need to provide a bearer token (JWT) in the <code>Authorization</code> header of you requests. This token can be aquired from Keycloak running on vision-x-auth.base-x-ecosystem.org via mTLS.</p>"},{"location":"api/getting-started/#get-your-certificate","title":"Get your Certificate","text":"<ol> <li>Sign in at vision-x-dataspace.base-x-ecosystem.org</li> <li>Download the <code>cert.zip</code> file by clicking on the download button in the upper right corner</li> <li>Unzip the file and store the contained files (tls.crt, tls.key and cert.p12) somewhere on your device</li> </ol>"},{"location":"api/getting-started/#get-a-bearer-token","title":"Get a Bearer Token","text":"<p>Now you can get the token by sending a request to the Token Endpoint of Keycloak using the certificate files. Concrete instructions on how to do this with several tools are further below.</p> <p>The response should look something like this <pre><code>{\n  \"access_token\": \"ey...\",\n  \"expires_in\": 28800,\n  \"refresh_expires_in\": 0,\n  \"token_type\": \"Bearer\",\n  \"id_token\": \"ey...\",\n  \"not-before-policy\": 0,\n  \"scope\": \"openid profile email\"\n}\n</code></pre></p> <p>For most API requests, you must include the <code>access_token</code> in the <code>Authorization</code> header using the format: <code>Authorization: Bearer &lt;your-access-token&gt;</code>. Such endpoints will hereafter be referred to as 'protected'.</p> <p>Note that this token is valid for 8 hours, after which you will need to send another request to get a new one.</p>"},{"location":"api/getting-started/#example-requests","title":"Example requests","text":"<p>Here are a concrete examples on how to use the certificate files to send the request to get the token.</p>"},{"location":"api/getting-started/#curl","title":"curl","text":"<pre><code>curl -k --cert &lt;cert-files-dir&gt;/tls.crt --key &lt;cert-files-dir&gt;/tls.key \\\n  -X POST \"https://vision-x-auth.base-x-ecosystem.org/realms/user/protocol/openid-connect/token\" \\\n  -d \"client_id=client-&lt;your-username&gt;\" \\\n  -d \"grant_type=client_credentials\" \\\n  -d \"scope=openid\"\n</code></pre>"},{"location":"api/getting-started/#python","title":"python","text":"<pre><code>from pathlib import Path\nimport requests\n\nusername = \"&lt;your-username&gt;\"\n\ncert_files_dir = Path(\"&lt;cert-files-dir&gt;\")\ncert = (cert_files_dir / \"tls.crt\", cert_files_dir / \"tls.key\")\n\nurl = \"https://vision-x-auth.base-x-ecosystem.org/realms/user/protocol/openid-connect/token\"\ndata = {\n    \"client_id\": f\"client-{username}\",\n    \"grant_type\": \"client_credentials\",\n    \"scope\": \"openid\"\n}\n\nresponse = requests.post(url, data=data, cert=cert)\n\nprint(response.json())\n</code></pre>"},{"location":"api/issuer/","title":"Issuer","text":"<p>The Issuer is responsible for issuing <code>Verifiable Credentials</code> and verifying <code>Verifiably Presentations</code>.</p>"},{"location":"api/issuer/#issue-credentials","title":"Issue Credentials","text":"<p>Credentials can be issued by sending a <code>POST</code> request to <code>/issuer/issue</code>. As this endpoint is protected and can only be used by administrators, this documentation will provide no detailled explanation on this endpoint.</p>"},{"location":"api/issuer/#did-document","title":"DID Document","text":"<p>The <code>DID Document</code> can be viewed by sending a <code>GET</code> request to <code>/issuer/did.json</code>. It can be used to verify <code>Verifiable Credentials</code> that where issued by the Issuer.</p>"},{"location":"frontend/","title":"DLR Dataspace Platform Frontend","text":"<p>A federated data marketplace that enables secure data sharing and collaboration across organizations while maintaining full control over your assets.</p>"},{"location":"frontend/#platform-components","title":"Platform Components","text":"<p>The DLR Dataspace Platform consists of several key components that work together to provide a comprehensive data sharing experience:</p> <ul> <li>Dashboard - Your central command center for dataspace management, including connector management</li> <li>Your Assets - Manage, organize, and share your data assets</li> <li>Federated Catalog - Discover and access data assets across the entire dataspace</li> <li>Agreements - Manage active agreements and initiate data transfers</li> </ul> <p>The DLR Dataspace Platform - Enabling secure, federated data collaboration across organizations.</p>"},{"location":"frontend/agreements/","title":"Agreements","text":"<p>Manage active agreements and initiate data transfers.</p> <p>The Agreement Dashboard displays all finalized agreements within the DLR Dataspace and allows you to manage data transfers. This is where you can view your active agreements, track transfer status, and initiate new transfers or re-transfers for existing agreements.</p>"},{"location":"frontend/agreements/#dashboard-overview","title":"Dashboard Overview","text":"<p>The Agreement Dashboard provides a comprehensive view of your agreements:</p> <ul> <li>Card-based layout - Each agreement displayed as an individual card with key information</li> <li>Status indicators - Visual status headers showing transfer state with color coding</li> <li>Transfer actions - Direct buttons to initiate transfers or re-transfers</li> <li>Detailed information - Access comprehensive agreement details through dialog windows</li> </ul>"},{"location":"frontend/agreements/#filtering-and-search","title":"Filtering and Search","text":"<p>The dashboard includes multiple filtering options to help you find specific agreements:</p> <ul> <li>Search functionality - Search by asset ID, provider, consumer, or agreement ID</li> <li>Time period filter - View agreements from last 24 hours, week, month, or all time</li> <li>Status filter - Filter by transfer status: all, transferred, or pending</li> <li>Statistics overview - View total agreements, transferred count, and pending count</li> </ul>"},{"location":"frontend/agreements/#transfer-status","title":"Transfer Status","text":"<p>Agreements can have different transfer statuses:</p>"},{"location":"frontend/agreements/#transferred","title":"Transferred","text":"<p>Data transfer has been completed successfully</p>"},{"location":"frontend/agreements/#pending-transfer","title":"Pending Transfer","text":"<p>Agreement exists but no transfer has been initiated</p>"},{"location":"frontend/agreements/#transfer-process","title":"Transfer Process","text":"<p>The transfer workflow follows these steps:</p> <ol> <li>Select agreement from dashboard</li> <li>Click Transfer or Re-transfer button</li> <li>Confirm transfer in dialog</li> <li>Transfer process initiates</li> <li>Agreement status updates to show transfer completion</li> </ol>"},{"location":"frontend/agreements/#agreement-details","title":"Agreement Details","text":"<p>Click on any agreement card or the Details button to view comprehensive information:</p> <ul> <li>Provider and Consumer - Organizations involved in the agreement</li> <li>Asset ID - Unique identifier for the shared asset</li> <li>Agreement ID - Unique identifier for the agreement contract</li> <li>Signing Date - When the agreement was established</li> <li>Counterparty Address - Network address of the other party (if available)</li> <li>Transfer Status - Current transfer state and transfer ID (if completed)</li> </ul>"},{"location":"frontend/agreements/#re-transfer-functionality","title":"Re-transfer Functionality","text":"<p>For agreements that have already been transferred, the dashboard provides re-transfer capabilities:</p> <ul> <li>Visual indicators - Transferred agreements show a repeat icon and orange re-transfer button</li> <li>Confirmation dialog - System asks for confirmation before initiating re-transfer</li> <li>Transfer history - Previous transfer information remains visible in agreement details</li> </ul> <p>Pro Tip</p> <p>Use the time period filter to focus on recent agreements and the search functionality to quickly locate specific agreements. The dashboard refreshes automatically after successful transfers, so you can monitor the progress of your data exchanges in real-time. Re-transfers can be useful for updating data or re-sending information when needed.</p>"},{"location":"frontend/assets/","title":"Your Assets","text":"<p>Manage, organize, and share your data assets.</p> <p>The Your Assets page is your personal data management workspace within the DLR Dataspace. Here you can view all assets from your connected storage systems, organize them, create offerings, and monitor how your shared assets are being used across the dataspace.</p>"},{"location":"frontend/assets/#asset-overview","title":"Asset Overview","text":"<p>Your Assets provides a comprehensive view of your storage resources:</p> <ul> <li>Files and folders - Browse your complete storage hierarchy</li> <li>Sharing status indicators - See which assets are currently shared with other participants</li> </ul>"},{"location":"frontend/assets/#creating-an-offer","title":"Creating an Offer","text":"<p>Making your assets available to other dataspace participants is easy:</p> <ol> <li>Select assets - Choose one or multiple files to share</li> <li>Click 'Create Offer' - The highlighted green button in the top right</li> <li>Choose a policy - Select from predefined policies or create a custom one</li> <li>Submit the offer - Your assets will appear in the Federated Catalog for eligible participants</li> </ol>"},{"location":"frontend/assets/#file-management-features","title":"File Management Features","text":""},{"location":"frontend/assets/#file-upload","title":"File Upload","text":"<p>Upload files directly to your storage: - Click 'Upload' button - Select files from your device - Or drag and drop files directly</p>"},{"location":"frontend/assets/#folder-management","title":"Folder Management","text":"<p>Organize your assets efficiently: - Create new folders - Navigate through your storage hierarchy</p>"},{"location":"frontend/assets/#download-assets","title":"Download Assets","text":"<p>Access your stored files easily: - Download your own assets - Access assets obtained from other participants</p>"},{"location":"frontend/assets/#delete-assets","title":"Delete Assets","text":"<p>Manage your storage space: - Delete unused files - Confirmation required for deletion - Warning: Deleting shared assets revokes access for other participants</p>"},{"location":"frontend/assets/#offer-history","title":"Offer History","text":"<p>Keep track of all asset sharing activities: - View past offers - See all previously shared assets and their status - Track agreements - Monitor which organizations have access to your assets</p>"},{"location":"frontend/assets/#policies-permissions","title":"Policies &amp; Permissions","text":"<p>Control who can access your assets and under what conditions:</p> <p>The DLR Dataspace offers flexible policy options when sharing your assets: - Predefined policies - Select from ready-made access templates - Group-based policies - Share with specific groups of dataspace participants - Custom policy creation - Define advanced rules for asset access and usage - Time-based restrictions - Set expiration dates for asset access</p> <p>Pro Tip</p> <p>Think of the Your Assets page as your personal data management hub. When preparing to share assets, consider organizing them into logical folders first, and applying descriptive names before creating offers. This makes your assets more discoverable and easier for other participants to understand their purpose and contents. In a future update, you'll be able to add rich metadata to assets, enhancing their discoverability in the marketplace.</p>"},{"location":"frontend/catalog/","title":"Federated Catalog","text":"<p>Discover and access data assets across the entire dataspace.</p> <p>The Federated Catalog serves as a marketplace for all available data assets within the DLR Dataspace. As a federated system, it allows you to browse and search for assets not only from your organization but from all participating organizations that have shared assets with the dataspace.</p>"},{"location":"frontend/catalog/#understanding-the-federated-catalog","title":"Understanding the Federated Catalog","text":"<p>The Federated Catalog is a core component of the DLR Dataspace that aggregates asset information from all participating connectors:</p> <ul> <li>Comprehensive view - See all available assets from every participant who has made offers</li> <li>Real-time updates - The catalog continuously updates as new offers are created or existing ones are modified</li> <li>Policy-aware browsing - Only see assets that your organization has permission to access based on policies</li> </ul>"},{"location":"frontend/catalog/#search-functionality","title":"Search Functionality","text":"<p>The powerful search functionality helps you find exactly what you need:</p> <ul> <li>Keyword search - Search asset names, descriptions, and metadata</li> <li>Provider filtering - Find assets from specific organizations or connectors</li> <li>Type filtering - Filter by file types, formats, or categories</li> <li>Advanced filters - Filter by date added, size, and other attributes</li> </ul>"},{"location":"frontend/catalog/#asset-browsing","title":"Asset Browsing","text":"<p>The catalog presents assets in an easy-to-browse format with rich metadata:</p> <ul> <li>Preview options - Quick preview of compatible file types</li> <li>Detailed view - Click on any asset to see complete metadata and usage terms</li> </ul>"},{"location":"frontend/catalog/#available-asset-types","title":"Available Asset Types","text":"<p>The catalog includes various types of data assets: - CSV Dataset - JSON Data - Images - Documents</p>"},{"location":"frontend/catalog/#asset-information","title":"Asset Information","text":"<p>Each asset in the catalog displays essential information to help you evaluate its relevance:</p> <ul> <li>Asset name and description - Clear identification of what the asset contains</li> <li>Provider information - Organization that owns and offers the asset</li> <li>File type and size - Format and storage requirements</li> <li>Created/updated dates - Timeline information for version tracking</li> <li>Associated policy - Usage restrictions and access conditions</li> <li>Additional metadata - Custom tags and categorization</li> </ul>"},{"location":"frontend/catalog/#asset-actions","title":"Asset Actions","text":"<p>From the catalog, you can take several actions with available assets:</p>"},{"location":"frontend/catalog/#view-details","title":"View Details","text":"<p>Examine complete metadata, preview contents when available, and read full descriptions before deciding to request access.</p>"},{"location":"frontend/catalog/#request-access","title":"Request Access","text":"<p>Initiate the agreement process to gain access to assets by accepting the associated policy terms and conditions.</p>"},{"location":"frontend/catalog/#downloadaccess","title":"Download/Access","text":"<p>Once agreements are in place, download or directly access approved assets through your connector.</p>"},{"location":"frontend/catalog/#advanced-filtering-coming-soon","title":"Advanced Filtering (Coming soon)","text":"<p>The catalog offers sophisticated filtering capabilities to help you find relevant assets:</p> <ul> <li>Organization filters - Find assets from specific data providers</li> <li>Date filters - Filter by creation or last updated date</li> <li>Size filters - Find assets within specific size ranges</li> <li>Type filters - Filter by file format or data type</li> <li>Policy filters - Find assets with specific usage conditions</li> <li>Custom metadata filters - Search by custom tags and categories</li> </ul> <p>Pro Tip</p> <p>The Federated Catalog is constantly evolving as new assets are added. Check back regularly or set up notifications to stay informed about new data that might be relevant to your projects. In the future, semantic search capabilities will be added to help you find assets based on content similarity and usage patterns, making discovery even more powerful.</p>"},{"location":"frontend/connectors/","title":"Connectors","text":"<p>Connect your storage resources to the dataspace.</p> <p>The Connectors page is central to your dataspace experience, allowing you to securely link your storage systems to the platform. Connectors enable seamless data exchange while maintaining control over your assets at all times.</p> <p>Info</p> <p>Currently, the DLR Dataspace supports Amazon S3 and Azure Storage connectors, with more integrations planned for future releases.</p>"},{"location":"frontend/connectors/#creating-a-connector","title":"Creating a Connector","text":"<p>The connector creation process is straightforward and guided:</p> <ol> <li>Select connector type</li> <li>Configure connection details</li> <li>Set access permissions </li> <li>Test and validate connection</li> </ol> <p>To create a new connector, click the \"+ New Connector\" button in the top-right corner of the Connectors page and follow the setup wizard.</p>"},{"location":"frontend/connectors/#managing-connectors","title":"Managing Connectors","text":"<p>Once created, you can manage your connectors from the main Connectors dashboard:</p> <ul> <li>View status and health - Monitor the connection status and synchronization health</li> <li>Delete connector - Remove a connector when it's no longer needed</li> </ul>"},{"location":"frontend/connectors/#supported-connector-types","title":"Supported Connector Types","text":""},{"location":"frontend/connectors/#amazon-s3","title":"Amazon S3","text":"<p>Full integration with AWS S3 buckets</p>"},{"location":"frontend/connectors/#azure-storage","title":"Azure Storage","text":"<p>Connect to Microsoft Azure Blob Storage</p>"},{"location":"frontend/connectors/#authentication-security","title":"Authentication &amp; Security","text":"<p>For secure access to your storage systems, you'll need to provide appropriate authentication:</p>"},{"location":"frontend/connectors/#amazon-s3-authentication","title":"Amazon S3 Authentication","text":"<ul> <li>Access Key ID</li> <li>Secret Access Key</li> <li>Region</li> <li>Bucket Name</li> </ul>"},{"location":"frontend/connectors/#azure-storage-authentication","title":"Azure Storage Authentication","text":"<ul> <li>Storage Account Name</li> <li>Storage Account Key</li> <li>Container Name</li> <li>Connection String (optional)</li> </ul> <p>Note: All credentials are encrypted and securely stored. The DLR Dataspace platform never stores your raw credentials in plain text and uses industry-standard encryption methods.</p> <p>Pro Tip</p> <p>Set up at least one connector before exploring other parts of the platform. Without an active connector, you won't be able to share your data assets or create offers for other participants. Think of connectors as the foundation for all other dataspace activities.</p>"},{"location":"frontend/dashboard/","title":"Dashboard","text":"<p>Your central command center for dataspace management.</p> <p>The Dashboard provides at-a-glance visibility into your dataspace environment, connector status, and group memberships. From here, you can monitor your integration health, understand the organizational structure, and manage your storage connectors.</p> <p>Info</p> <p>Currently, the DLR Dataspace supports S3 connectors, with more integrations planned for future releases.</p>"},{"location":"frontend/dashboard/#connector-management","title":"Connector Management","text":""},{"location":"frontend/dashboard/#connector-status","title":"Connector Status","text":"<p>The top section of the Dashboard displays the real-time status of your connector:</p> <ul> <li>Connection status indicator - Shows whether your connector is online, offline, or experiencing issues</li> <li>Quick action buttons - Restart connector, trigger synchronization, or access settings</li> </ul>"},{"location":"frontend/dashboard/#creating-a-connector","title":"Creating a Connector","text":"<p>The connector creation process is straightforward and guided:</p> <ol> <li>Select connector type</li> <li>Configure connection details  </li> <li>Set access permissions</li> <li>Test and validate connection</li> </ol> <p>To create a new connector, click the \"+ New Connector\" button in the top-right corner of the Connectors panel.</p>"},{"location":"frontend/dashboard/#supported-connector-types","title":"Supported Connector Types","text":""},{"location":"frontend/dashboard/#amazon-s3","title":"Amazon S3","text":"<p>Connect to AWS S3 buckets for object storage</p> <p>Authentication Requirements: - Access Key ID - Secret Access Key - Region - Bucket Name</p> <p>Note: All credentials are encrypted and securely stored. The DLR Dataspace platform never stores your raw credentials in plain text and uses industry-standard encryption methods.</p>"},{"location":"frontend/dashboard/#managing-connectors","title":"Managing Connectors","text":"<p>Once created, you can manage your connectors from the Dashboard:</p> <ul> <li>View status and health - Monitor the connection status and synchronization health</li> <li>Delete connector - Remove a connector when it's no longer needed</li> </ul>"},{"location":"frontend/dashboard/#removing-a-connector","title":"Removing a Connector","text":"<p>When you no longer need a connector, you can remove it from your dataspace:</p> <ol> <li>Find the connector card on the Connectors page</li> <li>Click on the 'Delete' button</li> <li>Confirm deletion when prompted</li> </ol> <p>Important: Removing a connector will: - Remove all assets linked to this connector from the dataspace catalog - Revoke any pending offers for assets from this connector - Delete the connection credentials from the platform (your actual storage remains untouched)</p>"},{"location":"frontend/dashboard/#group-visualization-management","title":"Group Visualization &amp; Management","text":""},{"location":"frontend/dashboard/#interactive-group-visualization","title":"Interactive Group Visualization","text":"<p>The central feature of the Dashboard is an interactive pie chart visualization:</p> <ul> <li>Group distribution - Visual representation of all groups in the dataspace</li> <li>Click-through navigation - Select any segment to view detailed information about that group</li> <li>Member count indicators - See how many users belong to each group at a glance</li> </ul> <p>Pro Tip</p> <p>The Dashboard serves as both your command center and connector management hub. Set up at least one connector before exploring other parts of the platform, as without an active connector, you won't be able to share assets or create offers. The visual interface makes it easy to understand the organizational structure and check your connector's health before proceeding to other areas of the platform.</p>"},{"location":"home/","title":"Dataspace Documentation","text":"<p>This site provides documentation for using the Dataspace. This includes guides on naviagting the website on vision-x-dataspace.base-x-ecosystem.org as well as the API at vision-x-api.base-x-ecosystem.org and much more.</p>"},{"location":"home/account/","title":"Account","text":""},{"location":"home/account/#login","title":"Login","text":"<p>You can log in at vision-x-datasapce.base-x-ecosystem.org using you username and password. After logging in you will be able to create your own Connector with which you can create offers for your data and services as well as negotiate and transfer existing offer from other participants.</p>"},{"location":"home/account/#settings","title":"Settings","text":"<p>To manage your account settings you can log in at vision-x-auth.base-x-ecosystem.org. There you can edit some of your personal information.</p> <p>Additionally, in the \"Account security\" section under \"Signing in\" you change your password or enable two-factor authentication for your account using your preferred authenticator app or similar.</p>"},{"location":"home/references/","title":"References","text":"<p>There is a plethora of resources describing how the dataspace technology works. Below are some of the most important ones</p>"},{"location":"home/references/#software","title":"Software","text":"<ul> <li>EDC</li> <li>TractusX-EDC</li> <li>Identity Hub</li> </ul>"},{"location":"home/references/#documentation","title":"Documentation","text":"<ul> <li>EDC</li> <li>TractusX-EDC</li> <li>Data Space Protocol</li> <li>Decentralized Claims Protocol</li> </ul>"},{"location":"jupyter/","title":"Jupyter","text":"<p>This section provides some <code>Jupyter</code> notebooks to illustrate how one can create an offer for some data or service and much more. Feel free to download them and try it out yourself.</p>"},{"location":"jupyter/negotiate-offer/","title":"Negotiate Offer","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\nimport requests\n\nbase_url = \"https://vision-x-api.base-x-ecosystem.org\"\n</pre> from pprint import pprint import requests  base_url = \"https://vision-x-api.base-x-ecosystem.org\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n</pre> # Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" <p>Gets and prints out the relevant conents of the Federated Catalog.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/federated/catalog\"\n\nresponse = requests.get(url)\nresponse.raise_for_status()\nprint(\"Got the federated catalog\")\n\nfederated_catalog = response.json()\nfor catalog in federated_catalog:\n  print(f\"Catalog from {catalog['originator']}\")\n  datasets = catalog[\"dcat:dataset\"]\n  if not isinstance(datasets, list):\n    datasets = [datasets]\n  for dataset in datasets:\n    if \"name\" not in dataset:\n      continue\n    print(f\"    Offer for {dataset['name']}\")\n</pre> url = f\"{base_url}/federated/catalog\"  response = requests.get(url) response.raise_for_status() print(\"Got the federated catalog\")  federated_catalog = response.json() for catalog in federated_catalog:   print(f\"Catalog from {catalog['originator']}\")   datasets = catalog[\"dcat:dataset\"]   if not isinstance(datasets, list):     datasets = [datasets]   for dataset in datasets:     if \"name\" not in dataset:       continue     print(f\"    Offer for {dataset['name']}\") <p>Pick out an Offer from the printed ones and fill in the below values for the variables accordingly.</p> In\u00a0[\u00a0]: Copied! <pre>catalog_from = \"some-catalog-from\"\noffer_for = \"some-offer-name\"\n</pre> catalog_from = \"some-catalog-from\" offer_for = \"some-offer-name\" <p>Gets the necessary data about the chosen Offer from the Federated Catalog in order to start a Negotiation and an eventual Transfer in the next steps.</p> In\u00a0[\u00a0]: Copied! <pre>for catalog in federated_catalog:\n  if catalog[\"originator\"] != catalog_from:\n    continue\n  datasets = catalog[\"dcat:dataset\"]\n  if not isinstance(datasets, list):\n    datasets = [datasets]\n  for dataset in datasets:\n    if not \"name\" in dataset or dataset[\"name\"] != offer_for:\n      continue\n    provider_id = catalog[\"dspace:participantId\"]\n    originator = catalog[\"originator\"]\n    policy = dataset[\"odrl:hasPolicy\"]\n    offered_asset_id = dataset[\"id\"]\n\nprint(\"Got necessary values\\n\")\n\nprint(f\"ProviderId:  {provider_id}\")\nprint(f\"Originator: {originator}\")\nprint(f\"Policy: {policy}\")\nprint(f\"OfferedAssetId: {offered_asset_id}\")\n</pre> for catalog in federated_catalog:   if catalog[\"originator\"] != catalog_from:     continue   datasets = catalog[\"dcat:dataset\"]   if not isinstance(datasets, list):     datasets = [datasets]   for dataset in datasets:     if not \"name\" in dataset or dataset[\"name\"] != offer_for:       continue     provider_id = catalog[\"dspace:participantId\"]     originator = catalog[\"originator\"]     policy = dataset[\"odrl:hasPolicy\"]     offered_asset_id = dataset[\"id\"]  print(\"Got necessary values\\n\")  print(f\"ProviderId:  {provider_id}\") print(f\"Originator: {originator}\") print(f\"Policy: {policy}\") print(f\"OfferedAssetId: {offered_asset_id}\") <p>Here you start a Negotiation for the Offer chosen in the previous step. If the given conditions are satisfied the Negotiation will succeed and an Agreement will be created.</p> <p>Starts the Negotiation using the values got from the previous step.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractnegotiations\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"counterPartyAddress\": originator,\n  \"protocol\": \"dataspace-protocol-http\",\n  \"policy\": policy[0] | {\"odrl:assigner\": {\"@id\": provider_id}, \"odrl:target\": {\"@id\": offered_asset_id}}\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nprint(response.content)\nresponse.raise_for_status()\n\nnegotiation_id = response.json()[\"@id\"]\nprint(f\"Started Negotiation with ID: {negotiation_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractnegotiations\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"counterPartyAddress\": originator,   \"protocol\": \"dataspace-protocol-http\",   \"policy\": policy[0] | {\"odrl:assigner\": {\"@id\": provider_id}, \"odrl:target\": {\"@id\": offered_asset_id}} }  response = requests.post(url, json=payload, headers=token_header) print(response.content) response.raise_for_status()  negotiation_id = response.json()[\"@id\"] print(f\"Started Negotiation with ID: {negotiation_id}\") <p>Wait a few seconds.</p> <p>Confirms that the Negotiation succeeded and get the ID corresponding Agreement which will be needed for the eventual Transfer.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractnegotiations/{negotiation_id}\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Negotiation data:\\n\")\npprint(response.json())\n\nagreement_id = response.json()[\"contractAgreementId\"]\n\nprint(f\"Originator: {originator}\")\nprint(f\"Agreement ID: {agreement_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractnegotiations/{negotiation_id}\"  response = requests.get(url, headers=token_header) response.raise_for_status() print(f\"Negotiation data:\\n\") pprint(response.json())  agreement_id = response.json()[\"contractAgreementId\"]  print(f\"Originator: {originator}\") print(f\"Agreement ID: {agreement_id}\") <p>If everything was successful you should now have gotten the releveant information for starting a Transfer. If you get an error it might be that the Negotiation has not finished yet or was rejected.</p>"},{"location":"jupyter/negotiate-offer/#negotiate-offer","title":"Negotiate Offer\u00b6","text":"<p>With this notebook you can start a Negotiation for an existing offer and thus generate an Agreement.</p>"},{"location":"jupyter/negotiate-offer/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/negotiate-offer/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/negotiate-offer/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/negotiate-offer/#get-federated-catalog","title":"Get Federated Catalog\u00b6","text":"<p>Here you get the contents of the Federated Catalog and then choose an Offer you want to negotiate for.</p>"},{"location":"jupyter/negotiate-offer/#initiate-negotiation","title":"Initiate Negotiation\u00b6","text":""},{"location":"jupyter/offer-file-amazon/","title":"Offer File (AmazonS3)","text":"In\u00a0[\u00a0]: Copied! <pre>import requests\n\nbase_url = \"https://vision-x-api.base-x-ecosystem.org\"\n</pre> import requests  base_url = \"https://vision-x-api.base-x-ecosystem.org\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# The URL of your AmazonS3 storage\naws_url = \"https://s3.us-east-1.amazonaws.com\"\n# The region of your AmazonS3 storage\naws_region = \"us-east-1\"\n# The username (Access Key ID) of your AmazonS3 storage account\naws_username = \"my-access-key-id\"\n# The password (Secret Access ID) of your AmazonS3 storage account\naws_password = \"my-secret-access-key\"\n# The bucket where your file is located\naws_bucket = \"my-bucket\"\n# The name of the file\nfilename = \"my-file.txt\"\n</pre> # Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # The URL of your AmazonS3 storage aws_url = \"https://s3.us-east-1.amazonaws.com\" # The region of your AmazonS3 storage aws_region = \"us-east-1\" # The username (Access Key ID) of your AmazonS3 storage account aws_username = \"my-access-key-id\" # The password (Secret Access ID) of your AmazonS3 storage account aws_password = \"my-secret-access-key\" # The bucket where your file is located aws_bucket = \"my-bucket\" # The name of the file filename = \"my-file.txt\" <p>Choose a unique id for your Asset.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\nasset_id = \"my-asset-id\"\n</pre> # Some unique ID asset_id = \"my-asset-id\" <p>Creates an Asset with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/assets\"\npayload = {\n  \"@context\": {},\n  \"@id\": asset_id,\n  \"properties\": {\n    \"name\": f\"File {filename}\",\n    \"description\": \"File offer example with AmazonS3\",\n    \"offerType\": \"data\"\n  },\n  \"dataAddress\": {\n    \"@type\": \"DataAddress\",\n    \"type\": \"AmazonS3\",\n    \"objectName\": filename,\n    \"region\": aws_region,\n    \"bucketName\": aws_bucket,\n    \"endpointOverride\": aws_url,\n    \"accessKeyId\": aws_username,\n    \"secretAccessKey\": aws_password\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Asset with ID: {asset_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/assets\" payload = {   \"@context\": {},   \"@id\": asset_id,   \"properties\": {     \"name\": f\"File {filename}\",     \"description\": \"File offer example with AmazonS3\",     \"offerType\": \"data\"   },   \"dataAddress\": {     \"@type\": \"DataAddress\",     \"type\": \"AmazonS3\",     \"objectName\": filename,     \"region\": aws_region,     \"bucketName\": aws_bucket,     \"endpointOverride\": aws_url,     \"accessKeyId\": aws_username,     \"secretAccessKey\": aws_password   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Asset with ID: {asset_id}\") <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\npolicy_id = \"my-policy-id\"\n</pre> # Some unique ID policy_id = \"my-policy-id\" <p>Choose a policy. Here a policy allowing anyone access is chosen.</p> In\u00a0[\u00a0]: Copied! <pre># Some ODRL policy\npolicy = {\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\"\n    }\n  ]\n}\n</pre> # Some ODRL policy policy = {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\"     }   ] } <p>Creates a Policy with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/policydefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": policy_id,\n  \"policy\": policy\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Policy with ID: {policy_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/policydefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": policy_id,   \"policy\": policy }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Policy with ID: {policy_id}\") <p>Here you create a Contract whose role it is to assign Policies to Assets. The contract's \"Access Policy\" sets the terms and conditions under which the Asset will be visible as an Offer in the Catalog and the \"Contract Policy\" sets the terms and conditions under which the Negotiation for an Offer will be agreed. The \"Assets Selector\" determines to which Assets the Policies are \"assigned\" to.</p> <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\ncontract_id = \"my-contract-id\"\n</pre> # Some unique ID contract_id = \"my-contract-id\" <p>Creates a Contract with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractdefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": contract_id,\n  \"accessPolicyId\": \"all\",\n  \"contractPolicyId\": policy_id,\n  \"assetsSelector\": {\n    \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n    \"operator\": \"=\",\n    \"operandRight\": asset_id\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Contract Definition with ID: {contract_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractdefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": contract_id,   \"accessPolicyId\": \"all\",   \"contractPolicyId\": policy_id,   \"assetsSelector\": {     \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",     \"operator\": \"=\",     \"operandRight\": asset_id   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Contract Definition with ID: {contract_id}\") <p>If everything was successful the Asset will be now available to others as an Offer in your Catalog.</p>"},{"location":"jupyter/offer-file-amazon/#offer-file-amazons3","title":"Offer File (AmazonS3)\u00b6","text":"<p>With this notebook you can create an offer for a file contained in an <code>AmazonS3</code> storage in the Dataspace.</p>"},{"location":"jupyter/offer-file-amazon/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/offer-file-amazon/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/offer-file-amazon/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/offer-file-amazon/#create-asset","title":"Create Asset\u00b6","text":"<p>Here you create an Asset for the file you want to offer. The Asset on one hand describes what kind of data is offered (properties) and on the other hand how the Connector can eventually retrieve the data to transfer it (dataAddress). However, this will be not be available for others as an Offer just yet.</p>"},{"location":"jupyter/offer-file-amazon/#create-policy","title":"Create Policy\u00b6","text":"<p>Here you create a Policy which is basically a collection of terms and conditions. This will later be \"assigned\" to the Asset in order to make it available for others given they meet the conditions.</p>"},{"location":"jupyter/offer-file-amazon/#create-contract-definition","title":"Create Contract Definition\u00b6","text":""},{"location":"jupyter/offer-file-azure/","title":"Offer File (AzureStorage)","text":"In\u00a0[\u00a0]: Copied! <pre>import requests\n\nbase_url = \"https://vision-x-api.base-x-ecosystem.org\"\n</pre> import requests  base_url = \"https://vision-x-api.base-x-ecosystem.org\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# Your account in the Azure Storage\nazure_account = \"my-account\"\n# The secret in the vault where your password (Account Key) for Azure Storage is stored\nazure_password = f\"{azure_account}-key\"\n# The container where your file is located\nazure_container = \"my-container\"\n# The name of the file\nfilename = \"my-file.txt\"\n</pre> # Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # Your account in the Azure Storage azure_account = \"my-account\" # The secret in the vault where your password (Account Key) for Azure Storage is stored azure_password = f\"{azure_account}-key\" # The container where your file is located azure_container = \"my-container\" # The name of the file filename = \"my-file.txt\" <p>Choose a unique id for your Asset.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\nasset_id = \"my-asset-id\"\n</pre> # Some unique ID asset_id = \"my-asset-id\" <p>Creates an Asset with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/assets\"\npayload = {\n  \"@context\": {},\n  \"@id\": asset_id,\n  \"properties\": {\n    \"name\": f\"File {filename}\",\n    \"description\": \"File offer example with AzureStorage\",\n    \"offerType\": \"data\"\n  },\n  \"dataAddress\": {\n    \"@type\": \"DataAddress\",\n    \"type\": \"AzureStorage\",\n    \"blobName\": filename,\n    \"account\": azure_account,\n    \"container\": azure_container,\n    \"keyName\": azure_password,\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Asset with ID: {asset_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/assets\" payload = {   \"@context\": {},   \"@id\": asset_id,   \"properties\": {     \"name\": f\"File {filename}\",     \"description\": \"File offer example with AzureStorage\",     \"offerType\": \"data\"   },   \"dataAddress\": {     \"@type\": \"DataAddress\",     \"type\": \"AzureStorage\",     \"blobName\": filename,     \"account\": azure_account,     \"container\": azure_container,     \"keyName\": azure_password,   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Asset with ID: {asset_id}\") <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\npolicy_id = \"my-policy-id\"\n</pre> # Some unique ID policy_id = \"my-policy-id\" <p>Choose a policy. Here a policy allowing anyone access is chosen.</p> In\u00a0[\u00a0]: Copied! <pre># Some ODRL policy\npolicy = {\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\"\n    }\n  ]\n}\n</pre> # Some ODRL policy policy = {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\"     }   ] } <p>Creates a Policy with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/policydefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": policy_id,\n  \"policy\": policy\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Policy with ID: {policy_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/policydefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": policy_id,   \"policy\": policy }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Policy with ID: {policy_id}\") <p>Here you create a Contract whose role it is to assign Policies to Assets. The contract's \"Access Policy\" sets the terms and conditions under which the Asset will be visible as an Offer in the Catalog and the \"Contract Policy\" sets the terms and conditions under which the Negotiation for an Offer will be agreed. The \"Assets Selector\" determines to which Assets the Policies are \"assigned\" to.</p> <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\ncontract_id = \"my-contract-id\"\n</pre> # Some unique ID contract_id = \"my-contract-id\" <p>Creates a Contract with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractdefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": contract_id,\n  \"accessPolicyId\": \"all\",\n  \"contractPolicyId\": policy_id,\n  \"assetsSelector\": {\n    \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n    \"operator\": \"=\",\n    \"operandRight\": asset_id\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Contract Definition with ID: {contract_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractdefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": contract_id,   \"accessPolicyId\": \"all\",   \"contractPolicyId\": policy_id,   \"assetsSelector\": {     \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",     \"operator\": \"=\",     \"operandRight\": asset_id   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Contract Definition with ID: {contract_id}\") <p>If everything was successful the Asset will be now available to others as an Offer in your Catalog.</p>"},{"location":"jupyter/offer-file-azure/#offer-file-azurestorage","title":"Offer File (AzureStorage)\u00b6","text":"<p>With this notebook you can create an offer for a file contained in an <code>AzureStorage</code> storage in the Dataspace.</p>"},{"location":"jupyter/offer-file-azure/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/offer-file-azure/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/offer-file-azure/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p> <p>Note that unlike the <code>AmazonS3</code> example, here you can not provide the URL of your storage directly. Neither can you specify your password (Account Key). Instead the URL is a Connector wide setting which can only be configured when creating or editing a Connector. Additionally, the password is retrieved from the vault. For this you can either manually put the password (base64 encoded) in the vault or use the one that is automatically created when starting a Connector for <code>AzureStorage</code>. This secret is called <code>&lt;your-account-name&gt;-key</code>.</p>"},{"location":"jupyter/offer-file-azure/#create-asset","title":"Create Asset\u00b6","text":"<p>Here you create an Asset for the file you want to offer. The Asset on one hand describes what kind of data is offered (properties) and on the other hand how the Connector can eventually retrieve the data to transfer it (dataAddress). However, this will be not be available for others as an Offer just yet.</p>"},{"location":"jupyter/offer-file-azure/#create-policy","title":"Create Policy\u00b6","text":"<p>Here you create a Policy which is basically a collection of terms and conditions. This will later be \"assigned\" to the Asset in order to make it available for others given they meet the conditions.</p>"},{"location":"jupyter/offer-file-azure/#create-contract-definition","title":"Create Contract Definition\u00b6","text":""},{"location":"jupyter/offer-service-http/","title":"Offer Service (HTTP)","text":"In\u00a0[\u00a0]: Copied! <pre>import requests\n\nbase_url = \"https://vision-x-api.base-x-ecosystem.org\"\n</pre> import requests  base_url = \"https://vision-x-api.base-x-ecosystem.org\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# The URL for your REST API\napi_url = \"https://echo.free.beeceptor.com\"\n</pre> # Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # The URL for your REST API api_url = \"https://echo.free.beeceptor.com\" <p>Choose a unique id for your Asset.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\nasset_id = \"my-asset-id\"\n</pre> # Some unique ID asset_id = \"my-asset-id\" <p>Creates an Asset with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/assets\"\npayload = {\n  \"@context\": {},\n  \"@id\": asset_id,\n  \"properties\": {\n    \"name\": f\"API at {api_url}\",\n    \"description\": \"EDR test\",\n    \"offerType\": \"service\"\n  },\n  \"dataAddress\": {\n    \"@type\": \"DataAddress\",\n    \"type\": \"HttpData\",\n    \"baseUrl\": api_url,\n    \"proxyMethod\": \"true\",  # allow methods other than GET\n    \"proxyBody\": \"true\"     # allow request bodies\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Asset with ID: {asset_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/assets\" payload = {   \"@context\": {},   \"@id\": asset_id,   \"properties\": {     \"name\": f\"API at {api_url}\",     \"description\": \"EDR test\",     \"offerType\": \"service\"   },   \"dataAddress\": {     \"@type\": \"DataAddress\",     \"type\": \"HttpData\",     \"baseUrl\": api_url,     \"proxyMethod\": \"true\",  # allow methods other than GET     \"proxyBody\": \"true\"     # allow request bodies   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Asset with ID: {asset_id}\") <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\npolicy_id = \"my-policy-id\"\n</pre> # Some unique ID policy_id = \"my-policy-id\" <p>Choose a policy. Here a policy allowing anyone access is chosen.</p> In\u00a0[\u00a0]: Copied! <pre># Some ODRL policy\npolicy = {\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\"\n    }\n  ]\n}\n</pre> # Some ODRL policy policy = {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\"     }   ] } <p>Creates a Policy with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/policydefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": policy_id,\n  \"policy\": policy\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Policy with ID: {policy_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/policydefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": policy_id,   \"policy\": policy }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Policy with ID: {policy_id}\") <p>Here you create a Contract whose role it is to assign Policies to Assets. The contract's \"Access Policy\" sets the terms and conditions under which the Asset will be visible as an Offer in the Catalog and the \"Contract Policy\" sets the terms and conditions under which the Negotiation for an Offer will be agreed. The \"Assets Selector\" determines to which Assets the Policies are \"assigned\" to.</p> <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\ncontract_id = \"my-contract-id\"\n</pre> # Some unique ID contract_id = \"my-contract-id\" <p>Creates a Contract with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractdefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": contract_id,\n  \"accessPolicyId\": \"all\",\n  \"contractPolicyId\": policy_id,\n  \"assetsSelector\": {\n    \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n    \"operator\": \"=\",\n    \"operandRight\": asset_id\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Contract Definition with ID: {contract_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractdefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": contract_id,   \"accessPolicyId\": \"all\",   \"contractPolicyId\": policy_id,   \"assetsSelector\": {     \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",     \"operator\": \"=\",     \"operandRight\": asset_id   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Contract Definition with ID: {contract_id}\") <p>If everything was successful the Asset will be now available to others as an Offer in your Catalog.</p>"},{"location":"jupyter/offer-service-http/#offer-service-http","title":"Offer Service (HTTP)\u00b6","text":"<p>With this notebook you can create an offer for use of a REST API via <code>HTTP</code>.</p>"},{"location":"jupyter/offer-service-http/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/offer-service-http/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/offer-service-http/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/offer-service-http/#create-asset","title":"Create Asset\u00b6","text":"<p>Here you create an Asset for access of the API you want to offer. The Asset on one hand describes what kind of data is offered (properties) and on the other hand how the Connector can eventually make requests to (dataAddress). However, this will be not be available for others as an Offer just yet.</p>"},{"location":"jupyter/offer-service-http/#create-policy","title":"Create Policy\u00b6","text":"<p>Here you create a Policy which is basically a collection of terms and conditions. This will later be \"assigned\" to the Asset in order to make it available for others given they meet the conditions.</p>"},{"location":"jupyter/offer-service-http/#create-contract-definition","title":"Create Contract Definition\u00b6","text":""},{"location":"jupyter/policies/","title":"Policies","text":"In\u00a0[\u00a0]: Copied! <pre>{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\"\n    }\n  ]\n}\n</pre> {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\"     }   ] } In\u00a0[\u00a0]: Copied! <pre>bpn = \"...\"\n\n{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\",\n      \"odrl:constraint\": {\n        \"odrl:or\": [\n          {\n            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n            \"odrl:operator\": {\n              \"@id\": \"odrl:eq\"\n            },\n            \"odrl:rightOperand\": bpn\n          }\n        ]\n      }\n    }\n  ]\n}\n</pre> bpn = \"...\"  {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\",       \"odrl:constraint\": {         \"odrl:or\": [           {             \"odrl:leftOperand\": \"BusinessPartnerNumber\",             \"odrl:operator\": {               \"@id\": \"odrl:eq\"             },             \"odrl:rightOperand\": bpn           }         ]       }     }   ] } In\u00a0[\u00a0]: Copied! <pre>time_from = \"2023-01-01T00:00:01Z\"\ntime_to = \"2026-01-01T00:00:01Z\"\n\n{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\",\n      \"odrl:constraint\": [\n        {\n          \"odrl:and\": [\n            {\n              \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",\n              \"odrl:operator\": {\n                \"@id\": \"odrl:gteq\"\n              },\n              \"odrl:rightOperand\": {\n                \"@value\": time_from,\n                \"@type\": \"xsd:datetime\"\n              }\n            },\n            {\n              \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",\n              \"odrl:operator\": {\n                \"@id\": \"odrl:lteq\"\n              },\n              \"odrl:rightOperand\": {\n                \"@value\": time_to,\n                \"@type\": \"xsd:datetime\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</pre> time_from = \"2023-01-01T00:00:01Z\" time_to = \"2026-01-01T00:00:01Z\"  {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\",       \"odrl:constraint\": [         {           \"odrl:and\": [             {               \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",               \"odrl:operator\": {                 \"@id\": \"odrl:gteq\"               },               \"odrl:rightOperand\": {                 \"@value\": time_from,                 \"@type\": \"xsd:datetime\"               }             },             {               \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",               \"odrl:operator\": {                 \"@id\": \"odrl:lteq\"               },               \"odrl:rightOperand\": {                 \"@value\": time_to,                 \"@type\": \"xsd:datetime\"               }             }           ]         }       ]     }   ] } In\u00a0[\u00a0]: Copied! <pre>duration = \"1d\"\n\n{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\",\n      \"odrl:constraint\": [\n        {\n          \"odrl:and\": [\n            {\n              \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",\n              \"odrl:operator\": {\n                \"@id\": \"odrl:gteq\"\n              },\n              \"odrl:rightOperand\": {\n                \"@value\": \"contractAgreement+0s\",\n                \"@type\": \"dateExpression\"\n              }\n            },\n            {\n              \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",\n              \"odrl:operator\": {\n                \"@id\": \"odrl:lteq\"\n              },\n              \"odrl:rightOperand\": {\n                \"@value\": f\"contractAgreement+{duration}\",\n                \"@type\": \"dateExpression\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</pre> duration = \"1d\"  {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\",       \"odrl:constraint\": [         {           \"odrl:and\": [             {               \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",               \"odrl:operator\": {                 \"@id\": \"odrl:gteq\"               },               \"odrl:rightOperand\": {                 \"@value\": \"contractAgreement+0s\",                 \"@type\": \"dateExpression\"               }             },             {               \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",               \"odrl:operator\": {                 \"@id\": \"odrl:lteq\"               },               \"odrl:rightOperand\": {                 \"@value\": f\"contractAgreement+{duration}\",                 \"@type\": \"dateExpression\"               }             }           ]         }       ]     }   ] } In\u00a0[\u00a0]: Copied! <pre>group = \"...\"\n\n{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\",\n      \"odrl:constraint\": [\n        {\n          \"odrl:leftOperand\": \"https://w3id.org/tractusx/v0.0.1/ns/BusinessPartnerGroup\",\n          \"odrl:operator\": {\n            \"@id\": \"odrl:isPartOf\"\n          },\n          \"odrl:rightOperand\": group\n        }\n      ]\n    }\n  ]\n}\n</pre> group = \"...\"  {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\",       \"odrl:constraint\": [         {           \"odrl:leftOperand\": \"https://w3id.org/tractusx/v0.0.1/ns/BusinessPartnerGroup\",           \"odrl:operator\": {             \"@id\": \"odrl:isPartOf\"           },           \"odrl:rightOperand\": group         }       ]     }   ] } <p>A BPN can be added to a BPN group by sending a POST request with the following payload to /management/business-partner-groups. The group does not need to be created separately first.</p> In\u00a0[\u00a0]: Copied! <pre>group = \"...\"\nbpn = \"...\"\n\n{\n  \"@context\": {\n    \"tx\": \"https://w3id.org/tractusx/v0.0.1/ns/\"\n  },\n  \"@id\": bpn,\n  \"tx:groups\": [\n    group\n  ]\n}\n</pre> group = \"...\" bpn = \"...\"  {   \"@context\": {     \"tx\": \"https://w3id.org/tractusx/v0.0.1/ns/\"   },   \"@id\": bpn,   \"tx:groups\": [     group   ] } In\u00a0[\u00a0]: Copied! <pre>credential = \"...\"\n\n{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\",\n      \"odrl:constraint\": {\n        \"odrl:or\": [\n          {\n            \"odrl:leftOperand\": credential,\n            \"odrl:operator\": {\n              \"@id\": \"odrl:eq\"\n            },\n            \"odrl:rightOperand\": \"active\"\n          }\n        ]\n      }\n    }\n  ]\n}\n</pre> credential = \"...\"  {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\",       \"odrl:constraint\": {         \"odrl:or\": [           {             \"odrl:leftOperand\": credential,             \"odrl:operator\": {               \"@id\": \"odrl:eq\"             },             \"odrl:rightOperand\": \"active\"           }         ]       }     }   ] }"},{"location":"jupyter/policies/#policies","title":"Policies\u00b6","text":"<p>This is a collection of Policies that can be used in the Dataspace.</p> <p>There exists also a repository to get familiar with creating policies, see EdcPolicyPlayground.</p>"},{"location":"jupyter/policies/#blank-policy","title":"Blank Policy\u00b6","text":"<p>A policy that has no conditions.</p>"},{"location":"jupyter/policies/#bpn-policy","title":"BPN Policy\u00b6","text":"<p>A policy that requires to have a specific BPN (unique ID for Connectors in the Dataspace).</p>"},{"location":"jupyter/policies/#time-interval-policy","title":"Time Interval Policy\u00b6","text":"<p>A policy the requires the current time for the transfer to be in a certain interval.</p> <p>Note: You will need to add <code>\"xsd\": \"http://www.w3.org/2001/XMLSchema#\"</code> to <code>@context</code>.</p>"},{"location":"jupyter/policies/#time-duration-policy","title":"Time Duration Policy\u00b6","text":"<p>A policy the requires the current time for the transfer to be within up to a certain time of the generation of an Agreement.</p>"},{"location":"jupyter/policies/#bpn-group-policy","title":"BPN Group Policy\u00b6","text":"<p>A policy that requires to be part of a specific BPN group.</p>"},{"location":"jupyter/policies/#credential-policy","title":"Credential Policy\u00b6","text":"<p>A policy that requires to hold a specific Credential.</p>"},{"location":"jupyter/transfer-file-amazon/","title":"Transfer File (AmazonS3)","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\nimport requests\n\nbase_url = \"https://vision-x-api.base-x-ecosystem.org\"\n</pre> from pprint import pprint import requests  base_url = \"https://vision-x-api.base-x-ecosystem.org\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# The URL of your AmazonS3 storage\naws_url = \"https://s3.us-east-1.amazonaws.com\"\n# The region of your AmazonS3 storage\naws_region = \"us-east-1\"\n# The username (Access Key ID) of your AmazonS3 storage account\naws_username = \"my-access-key-id\"\n# The password (Secret Access ID) of your AmazonS3 storage account\naws_password = \"my-secret-access-key\"\n# The bucket where the file should be stored in\naws_bucket = \"my-bucket\"\n# The DSP address of the Connector providing the offer\noriginator = \"https://vision-x-api.base-x-ecosystem.org/connectors/alice/cp/protocol\"\n# The ID of the Agreement for the offer\nagreement_id = \"some-random-uuid\"\n</pre> # Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # The URL of your AmazonS3 storage aws_url = \"https://s3.us-east-1.amazonaws.com\" # The region of your AmazonS3 storage aws_region = \"us-east-1\" # The username (Access Key ID) of your AmazonS3 storage account aws_username = \"my-access-key-id\" # The password (Secret Access ID) of your AmazonS3 storage account aws_password = \"my-secret-access-key\" # The bucket where the file should be stored in aws_bucket = \"my-bucket\" # The DSP address of the Connector providing the offer originator = \"https://vision-x-api.base-x-ecosystem.org/connectors/alice/cp/protocol\" # The ID of the Agreement for the offer agreement_id = \"some-random-uuid\" <p>Initiates the Transfer.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"counterPartyAddress\": originator,\n  \"contractId\": agreement_id,\n  \"transferType\": \"AmazonS3-PUSH\",\n  \"dataDestination\": {\n    \"type\": \"AmazonS3\",\n    \"region\": aws_region,\n    \"endpointOverride\": aws_url,\n    \"accessKeyId\": aws_username,\n    \"secretAccessKey\": aws_password,\n    \"bucketName\": aws_bucket,\n    \"keyName\": \"dummy\"\n  },\n  \"protocol\": \"dataspace-protocol-http\"\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nprint(response.content)\nresponse.raise_for_status()\n\ntransfer_id = response.json()[\"@id\"]\nprint(f\"Started Transfer with ID: {transfer_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"counterPartyAddress\": originator,   \"contractId\": agreement_id,   \"transferType\": \"AmazonS3-PUSH\",   \"dataDestination\": {     \"type\": \"AmazonS3\",     \"region\": aws_region,     \"endpointOverride\": aws_url,     \"accessKeyId\": aws_username,     \"secretAccessKey\": aws_password,     \"bucketName\": aws_bucket,     \"keyName\": \"dummy\"   },   \"protocol\": \"dataspace-protocol-http\" }  response = requests.post(url, json=payload, headers=token_header) print(response.content) response.raise_for_status()  transfer_id = response.json()[\"@id\"] print(f\"Started Transfer with ID: {transfer_id}\") <p>Confirms that the Transfer succeeded.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses/{transfer_id}\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Transfer data:\\n\")\npprint(response.json())\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses/{transfer_id}\"  response = requests.get(url, headers=token_header) response.raise_for_status() print(f\"Transfer data:\\n\") pprint(response.json()) <p>If everything was successful the file should now be in your storage.</p>"},{"location":"jupyter/transfer-file-amazon/#transfer-file-amazons3","title":"Transfer File (AmazonS3)\u00b6","text":"<p>With this notebook you can transfer an offered file for which you already have an Agreement to an <code>AmazonS3</code> storage.</p>"},{"location":"jupyter/transfer-file-amazon/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/transfer-file-amazon/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/transfer-file-amazon/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/transfer-file-amazon/#initiate-transfer","title":"Initiate Transfer\u00b6","text":"<p>Here you will request for the transfer of the data to your storage.</p>"},{"location":"jupyter/transfer-file-azure/","title":"Transfer File (AzureStorage)","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\nimport requests\n\nbase_url = \"https://vision-x-api.base-x-ecosystem.org\"\n</pre> from pprint import pprint import requests  base_url = \"https://vision-x-api.base-x-ecosystem.org\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# Your account in the Azure Storage\nazure_account = \"my-account\"\n# The secret in the vault where your SAS token for Azure Storage is stored\nazure_sas = \"my-sas-secret-name\"\n# The container where the file should be stored in\nazure_container = \"my-container\"\n# The DSP address of the Connector providing the offer\noriginator = \"https://vision-x-api.base-x-ecosystem.org/connectors/alice/cp/protocol\"\n# The ID of the Agreement for the offer\nagreement_id = \"some-random-uuid\"\n</pre> # Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # Your account in the Azure Storage azure_account = \"my-account\" # The secret in the vault where your SAS token for Azure Storage is stored azure_sas = \"my-sas-secret-name\" # The container where the file should be stored in azure_container = \"my-container\" # The DSP address of the Connector providing the offer originator = \"https://vision-x-api.base-x-ecosystem.org/connectors/alice/cp/protocol\" # The ID of the Agreement for the offer agreement_id = \"some-random-uuid\" <p>Initiates the Transfer.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"counterPartyAddress\": originator,\n  \"contractId\": agreement_id,\n  \"transferType\": \"AmazonS3-PUSH\",\n  \"dataDestination\": {\n    \"type\": \"AmazonS3\",\n    \"container\": azure_container,\n    \"account\": azure_account,\n    \"keyName\": azure_sas,\n  },\n  \"protocol\": \"dataspace-protocol-http\"\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nprint(response.content)\nresponse.raise_for_status()\n\ntransfer_id = response.json()[\"@id\"]\nprint(f\"Started Transfer with ID: {transfer_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"counterPartyAddress\": originator,   \"contractId\": agreement_id,   \"transferType\": \"AmazonS3-PUSH\",   \"dataDestination\": {     \"type\": \"AmazonS3\",     \"container\": azure_container,     \"account\": azure_account,     \"keyName\": azure_sas,   },   \"protocol\": \"dataspace-protocol-http\" }  response = requests.post(url, json=payload, headers=token_header) print(response.content) response.raise_for_status()  transfer_id = response.json()[\"@id\"] print(f\"Started Transfer with ID: {transfer_id}\") <p>Confirms that the Transfer succeeded.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses/{transfer_id}\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Transfer data:\\n\")\npprint(response.json())\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses/{transfer_id}\"  response = requests.get(url, headers=token_header) response.raise_for_status() print(f\"Transfer data:\\n\") pprint(response.json()) <p>If everything was successful the file should now be in your storage.</p>"},{"location":"jupyter/transfer-file-azure/#transfer-file-azurestorage","title":"Transfer File (AzureStorage)\u00b6","text":"<p>With this notebook you can transfer an offered file for which you already have an Agreement to an <code>AzureStorage</code> storage.</p> <p>WARNING: Due to a known bug in the TractusX-EDC, the transfer will not succeed and instead corrupt your Connector's database. Proceed with caution.</p>"},{"location":"jupyter/transfer-file-azure/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/transfer-file-azure/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/transfer-file-azure/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p> <p>Note that unlike the <code>AmazonS3</code> example, here you can not provide the URL of your storage directly. Neither can you specify your password (Account Key). Instead the URL is a Connector wide setting which can only be configured when creating or editing a Connector. Additionally, instaed of a providing a password a SAS token is retrieved from the vault. For this you will need to manually generate a SAS token and put it into the vault as a JSON string.</p> <p>An example SAS token as a JSON string to put into the vault is provided here</p> <pre>{\n    \"edctype\": \"dataspaceconnector:azuretoken\",\n    \"sas\": \"se=2025-05-20T13%3A31%3A26Z&amp;sp=w&amp;sv=2025-05-05&amp;sr=c&amp;sig=ghRxJvgnvlnN96xzc1trTj4R4cJtaH7glNnjdCXE3iQ%3D\"\n}\n</pre>"},{"location":"jupyter/transfer-file-azure/#initiate-transfer","title":"Initiate Transfer\u00b6","text":"<p>Here you will request for the transfer of the data to your storage.</p>"},{"location":"jupyter/transfer-http-pull/","title":"Transfer HTTP (Pull)","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\nimport requests\n\nbase_url = \"https://vision-x-api.base-x-ecosystem.org\"\n</pre> from pprint import pprint import requests  base_url = \"https://vision-x-api.base-x-ecosystem.org\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# The BPN of the Connector providing the offer\nprovider_id = \"BPNL123456789ABC\" \n# The DSP address of the Connector providing the offer\noriginator = \"https://vision-x-api.base-x-ecosystem.org/connectors/alice/cp/protocol\"\n# The policy of the offer\npolicy = {\n    \"@id\": \"some-uuid:some-uuid:some-uuid\",\n    \"@type\": \"odrl:Offer\",\n    \"odrl:permission\": [],\n    \"odrl:prohibition\": [],\n    \"odrl:obligation\": []\n}\n# The ID of the Asset in the offer\noffered_asset_id = \"some-random-uuid\"\n</pre> # Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # The BPN of the Connector providing the offer provider_id = \"BPNL123456789ABC\"  # The DSP address of the Connector providing the offer originator = \"https://vision-x-api.base-x-ecosystem.org/connectors/alice/cp/protocol\" # The policy of the offer policy = {     \"@id\": \"some-uuid:some-uuid:some-uuid\",     \"@type\": \"odrl:Offer\",     \"odrl:permission\": [],     \"odrl:prohibition\": [],     \"odrl:obligation\": [] } # The ID of the Asset in the offer offered_asset_id = \"some-random-uuid\" <p>Here you start an EDR Negotiation for the Offer chosen in the previous step. This performs the usual Negotiation and Tranfer in such a way that you can later retrieve access tokens. If the given conditions are satisfied the EDR Negotiation will succeed and an Agreement will be created.</p> <p>Starts the EDR Negotiation using the values got from the previous step.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/edrs\"\npayload = {\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"counterPartyAddress\": originator,\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"policy\": policy | {\"odrl:assigner\": {\"@id\": provider_id}, \"odrl:target\": {\"@id\": offered_asset_id}}\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\n\nnegotiation_id = response.json()[\"@id\"]\nprint(f\"Started EDR Negotiation with ID: {negotiation_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/edrs\" payload = { \t\"@context\": { \t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\" \t}, \t\"counterPartyAddress\": originator, \t\"protocol\": \"dataspace-protocol-http\", \t\"policy\": policy | {\"odrl:assigner\": {\"@id\": provider_id}, \"odrl:target\": {\"@id\": offered_asset_id}} }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status()  negotiation_id = response.json()[\"@id\"] print(f\"Started EDR Negotiation with ID: {negotiation_id}\") <p>As mentioned the EDR starts a Negotiation and a Transfer. Information about the Negotiation can be easily accessed by the below request since we know its ID from the previous step. However, for the transfer we do not know the ID so it is not as easy to get information on it at this point.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractnegotiations/{negotiation_id}\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Negotiation data:\\n\")\npprint(response.json())\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/contractnegotiations/{negotiation_id}\"  response = requests.get(url, headers=token_header) response.raise_for_status() print(f\"Negotiation data:\\n\") pprint(response.json()) <p>Gets all EDRs for the chosen asset.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/edrs/request\"\npayload = {\n  \"@context\": {},\n  \"@type\": \"QuerySpec\",\n  \"filterExpression\": [\n        {\n            \"operandLeft\": \"assetId\",\n            \"operator\": \"=\",\n            \"operandRight\": offered_asset_id\n        }\n        \n    ]\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\n\nprint(f\"EDRs data:\\n\")\npprint(response.json())\n\ntransfer_id = response.json()[0][\"transferProcessId\"]\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/edrs/request\" payload = {   \"@context\": {},   \"@type\": \"QuerySpec\",   \"filterExpression\": [         {             \"operandLeft\": \"assetId\",             \"operator\": \"=\",             \"operandRight\": offered_asset_id         }              ] }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status()  print(f\"EDRs data:\\n\") pprint(response.json())  transfer_id = response.json()[0][\"transferProcessId\"] <p>Uses the Transfer Id from the previous step to get the acccess token.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/edrs/{transfer_id}/dataaddress\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\n\nprint(f\"EDR data:\\n\")\npprint(response.json())\n\naccess_token = response.json()[\"authorization\"]\nendpoint = response.json()[\"endpoint\"]\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/edrs/{transfer_id}/dataaddress\"  response = requests.get(url, headers=token_header) response.raise_for_status()  print(f\"EDR data:\\n\") pprint(response.json())  access_token = response.json()[\"authorization\"] endpoint = response.json()[\"endpoint\"] In\u00a0[\u00a0]: Copied! <pre>headers = {\"Authorization\": access_token}\n\npayload = {\n    \"test\": \"This is a test.\"\n}\n\nresponse = requests.post(endpoint, headers=headers, json=payload)\n\nprint(\"Response:\")\npprint(response.json())\n</pre> headers = {\"Authorization\": access_token}  payload = {     \"test\": \"This is a test.\" }  response = requests.post(endpoint, headers=headers, json=payload)  print(\"Response:\") pprint(response.json()) <p>If everything was successful you should now be able to see the response from the service.</p>"},{"location":"jupyter/transfer-http-pull/#transfer-http-pull","title":"Transfer HTTP (Pull)\u00b6","text":"<p>With this notebook you can send request to an offered service.</p>"},{"location":"jupyter/transfer-http-pull/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps. Unlike in the HTTP Push, here you will not be able to use a preexisting regular agreement. Instead the Negotiation and Transfer will be handled via the EDR (Endpoint Data Reference) endpoints. For more information, see TractusX-EDC Walkthrough.</p>"},{"location":"jupyter/transfer-http-pull/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assing the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/transfer-http-pull/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/transfer-http-pull/#initiate-edr-negotiation","title":"Initiate EDR Negotiation\u00b6","text":""},{"location":"jupyter/transfer-http-pull/#get-edr","title":"Get EDR\u00b6","text":"<p>Here you will get the access token.</p>"},{"location":"jupyter/transfer-http-pull/#access-the-service","title":"Access the Service\u00b6","text":"<p>Now you can use the access token to make requests to the offered service. Your request will go to the provider's Connector which will confirm the existence and validity of the associated Agreeement and then reroute your request to the service. Finally the Connector will send back the response of the service.</p>"},{"location":"jupyter/transfer-http-push/","title":"Transfer HTTP (Push)","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\nimport requests\n\nbase_url = \"https://vision-x-api.base-x-ecosystem.org\"\n</pre> from pprint import pprint import requests  base_url = \"https://vision-x-api.base-x-ecosystem.org\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# The URL of your endpoint where the data should be sent to\nendpoint_url = \"https://my-endpoint.requestcatcher.com\"\n# The DSP address of the Connector providing the offer\noriginator = \"https://vision-x-api.base-x-ecosystem.org/connectors/alice/cp/protocol\"\n# The ID of the Agreement for the offer\nagreement_id = \"some-random-uuid\"\n</pre> # Your JWT recevied from Keycloak via vision-x-auth.base-x-ecosystem.org token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # The URL of your endpoint where the data should be sent to endpoint_url = \"https://my-endpoint.requestcatcher.com\" # The DSP address of the Connector providing the offer originator = \"https://vision-x-api.base-x-ecosystem.org/connectors/alice/cp/protocol\" # The ID of the Agreement for the offer agreement_id = \"some-random-uuid\" <p>Initiates the transfer.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"counterPartyAddress\": originator,\n  \"contractId\": agreement_id,\n  \"transferType\": \"HttpData-PUSH\",\n  \"dataDestination\": {\n    \"type\": \"HttpData\",\n    \"baseUrl\": endpoint_url,\n  },\n  \"protocol\": \"dataspace-protocol-http\"\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nprint(response.content)\nresponse.raise_for_status()\n\ntransfer_id = response.json()[\"@id\"]\nprint(f\"Started Transfer with ID: {transfer_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"counterPartyAddress\": originator,   \"contractId\": agreement_id,   \"transferType\": \"HttpData-PUSH\",   \"dataDestination\": {     \"type\": \"HttpData\",     \"baseUrl\": endpoint_url,   },   \"protocol\": \"dataspace-protocol-http\" }  response = requests.post(url, json=payload, headers=token_header) print(response.content) response.raise_for_status()  transfer_id = response.json()[\"@id\"] print(f\"Started Transfer with ID: {transfer_id}\") <p>Confirms that the transfer succeeded.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses/{transfer_id}\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Transfer data:\\n\")\npprint(response.json())\n</pre> url = f\"{base_url}/connectors/{connector_name}/cp/management/v3/transferprocesses/{transfer_id}\"  response = requests.get(url, headers=token_header) response.raise_for_status() print(f\"Transfer data:\\n\") pprint(response.json()) <p>If everything was successful the data should now have been sent to your endpoint.</p>"},{"location":"jupyter/transfer-http-push/#transfer-http-push","title":"Transfer HTTP (Push)\u00b6","text":"<p>With this notebook you can transfer data from an offer for which you already have an Agreement to an <code>HTTP</code> endpoint.</p>"},{"location":"jupyter/transfer-http-push/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/transfer-http-push/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/transfer-http-push/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/transfer-http-push/#initiate-transfer","title":"Initiate Transfer\u00b6","text":"<p>Here you will request for the transfer of the data to your endpoint.</p>"}]}